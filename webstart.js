(()=>{"use strict";var e={178:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});var r=s(774);const n=[21,47,48,52,55,56,59,60,61,63,121];let i=0,O=null,a=0;function o(e,t){return t==a&&e==O?i:(O=e,a=t,i=function(e,t){for(let s=0;;t++){let r=e.get(t);if(32==r)s++;else{if(9!=r)return 10==r||13==r||35==r?-1:s;s+=8-s%8}}}(e,t))}const $=new r.ExternalTokenizer(((e,t,s)=>{let r=e.get(t.start);r<0?t.accept(167,t.start):10!=r&&13!=r||(null!=s.startOf(n)?t.accept(165,t.start+1):o(e,t.start+1)<0?t.accept(166,t.start+1):t.accept(164,t.start+1))}),{contextual:!0,fallback:!0}),l=new r.ExternalTokenizer(((e,t,s)=>{let r,i=e.get(t.start-1);(10==i||13==i)&&(r=o(e,t.start))>=0&&r!=s.context.depth&&null==s.startOf(n)&&t.accept(r<s.context.depth?163:162,t.start)}));function p(e,t){this.parent=e,this.depth=t,this.hash=(e?e.hash+e.hash<<8:0)+t+(t<<4)}const c=new p(null,0),u=new r.ContextTracker({start:c,shift:(e,t,s,r)=>162==t?new p(e,o(s,r.pos)):163==t?e.parent:e,hash:e=>e.hash}),h=new r.ExternalTokenizer(((e,t)=>{let s=t.start;for(let t="print",r=0;r<t.length;r++,s++)if(e.get(s)!=t.charCodeAt(r))return;let r=s;if(!/\w/.test(String.fromCharCode(e.get(s))))for(;;s++){let n=e.get(s);if(32!=n&&9!=n)return void(40!=n&&46!=n&&10!=n&&13!=n&&35!=n&&t.accept(1,r))}})),f={__proto__:null,await:40,or:48,and:50,in:54,not:56,is:58,if:64,else:66,lambda:70,yield:88,from:90,async:98,for:100,None:152,True:154,False:154,del:168,pass:172,break:176,continue:180,return:184,raise:192,import:196,as:198,global:202,nonlocal:204,assert:208,elif:218,while:222,try:228,except:230,finally:232,with:236,def:240,class:250},g=r.Parser.deserialize({version:13,states:"!?|O`Q$IXOOO%cQ$I[O'#GaOOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'RQ$IWO'#ClO(tQ$I[O'#G`OOQ$IS'#Ga'#GaOOQ$IS'#DR'#DROOQ$IS'#G`'#G`O)bQ$IWO'#CqO)rQ$IWO'#DbO*SQ$IWO'#DfOOQ$IS'#Ds'#DsO*gO`O'#DsO*oOpO'#DsO*wO!bO'#DtO+SO#tO'#DtO+_O&jO'#DtO+jO,UO'#DtO-lQ$I[O'#GQOOQ$IS'#GQ'#GQO'RQ$IWO'#GPO/OQ$I[O'#GPOOQ$IS'#E]'#E]O/gQ$IWO'#E^OOQ$IS'#GO'#GOO/qQ$IWO'#F}OOQ$IV'#F}'#F}O/|Q$IWO'#FPOOQ$IS'#Fr'#FrO0RQ$IWO'#FOOOQ$IV'#HZ'#HZOOQ$IV'#F|'#F|OOQ$IT'#FR'#FRQ`Q$IXOOO'RQ$IWO'#CoO0aQ$IWO'#CzO0hQ$IWO'#DOO0vQ$IWO'#GeO1WQ$I[O'#EQO'RQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1lQ$IWO'#EZO2SQ$IWO'#E_O/|Q$IWO'#EaO2gQ$I[O'#EaO/|Q$IWO'#EdO/gQ$IWO'#EgO/gQ$IWO'#EkO/gQ$IWO'#EnO2rQ$IWO'#EpO2yQ$IWO'#EuO3UQ$IWO'#EqO/gQ$IWO'#EuO/|Q$IWO'#EwO/|Q$IWO'#E|OOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O3ZQ$IWO'#DmOOQ$IS,5:W,5:WO3nQ$IWO,5:ZO3{Q%1`O,5:ZO4QQ$I[O,59WO0aQ$IWO,59_O0aQ$IWO,59_O0aQ$IWO,59_O6pQ$IWO,59_O6uQ$IWO,59_O6|Q$IWO,59gO7TQ$IWO'#G`O8ZQ$IWO'#G_OOQ$IS'#G_'#G_OOQ$IS'#DX'#DXO8rQ$IWO,59]O'RQ$IWO,59]O9QQ$IWO,59]O9VQ$IWO,5:PO'RQ$IWO,5:POOQ$IS,59|,59|O9eQ$IWO,59|O9jQ$IWO,5:VO'RQ$IWO,5:VO'RQ$IWO,5:TOOQ$IS,5:Q,5:QO9{Q$IWO,5:QO:QQ$IWO,5:UOOOO'#FZ'#FZO:VO`O,5:_OOQ$IS,5:_,5:_OOOO'#F['#F[O:_OpO,5:_O:gQ$IWO'#DuOOOO'#F]'#F]O:wO!bO,5:`OOQ$IS,5:`,5:`OOOO'#F`'#F`O;SO#tO,5:`OOOO'#Fa'#FaO;_O&jO,5:`OOOO'#Fb'#FbO;jO,UO,5:`OOQ$IS'#Fc'#FcO;uQ$I[O,5:dO>gQ$I[O,5<kO?QQ%GlO,5<kO?qQ$I[O,5<kOOQ$IS,5:x,5:xO@YQ$IXO'#FkOAiQ$IWO,5;TOOQ$IV,5<i,5<iOAtQ$I[O'#HWOB]Q$IWO,5;kOOQ$IS-E9p-E9pOOQ$IV,5;j,5;jO3PQ$IWO'#EwOOQ$IT-E9P-E9POBeQ$I[O,59ZODlQ$I[O,59fOEVQ$IWO'#GbOEbQ$IWO'#GbO/|Q$IWO'#GbOEmQ$IWO'#DQOEuQ$IWO,59jOEzQ$IWO'#GfO'RQ$IWO'#GfO/gQ$IWO,5=POOQ$IS,5=P,5=PO/gQ$IWO'#D|OOQ$IS'#D}'#D}OFiQ$IWO'#FeOFyQ$IWO,58zOGXQ$IWO,58zO)eQ$IWO,5:jOG^Q$I[O'#GhOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGqQ$IWO,5:yOHSQ$IWO,5:{OOQ$IS'#Fh'#FhOHbQ$I[O,5:{OHpQ$IWO,5:{OHuQ$IWO'#HYOOQ$IS,5;O,5;OOITQ$IWO'#HVOOQ$IS,5;R,5;RO3UQ$IWO,5;VO3UQ$IWO,5;YOIfQ$I[O'#H[O'RQ$IWO'#H[OIpQ$IWO,5;[O2rQ$IWO,5;[O/gQ$IWO,5;aO/|Q$IWO,5;cOIuQ$IXO'#ElOKOQ$IZO,5;]ONaQ$IWO'#H]O3UQ$IWO,5;aONlQ$IWO,5;cONqQ$IWO,5;hO!#fQ$I[O1G.hO!#mQ$I[O1G.hO!&^Q$I[O1G.hO!&hQ$I[O1G.hO!)RQ$I[O1G.hO!)fQ$I[O1G.hO!)yQ$IWO'#GnO!*XQ$I[O'#GQO/gQ$IWO'#GnO!*cQ$IWO'#GmOOQ$IS,5:X,5:XO!*kQ$IWO,5:XO!*pQ$IWO'#GoO!*{Q$IWO'#GoO!+`Q$IWO1G/uOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.y1G.yO!,`Q$I[O1G.yO!,gQ$I[O1G.yO0aQ$IWO1G.yO!-SQ$IWO1G/ROOQ$IS'#DW'#DWO/gQ$IWO,59qOOQ$IS1G.w1G.wO!-ZQ$IWO1G/cO!-kQ$IWO1G/cO!-sQ$IWO1G/dO'RQ$IWO'#GgO!-xQ$IWO'#GgO!-}Q$I[O1G.wO!._Q$IWO,59fO!/eQ$IWO,5=VO!/uQ$IWO,5=VO!/}Q$IWO1G/kO!0SQ$I[O1G/kOOQ$IS1G/h1G/hO!0dQ$IWO,5=QO!1ZQ$IWO,5=QO/gQ$IWO1G/oO!1xQ$IWO1G/qO!1}Q$I[O1G/qO!2_Q$I[O1G/oOOQ$IS1G/l1G/lOOQ$IS1G/p1G/pOOOO-E9X-E9XOOQ$IS1G/y1G/yOOOO-E9Y-E9YO!2oQ$IWO'#GzO/gQ$IWO'#GzO!2}Q$IWO,5:aOOOO-E9Z-E9ZOOQ$IS1G/z1G/zOOOO-E9^-E9^OOOO-E9_-E9_OOOO-E9`-E9`OOQ$IS-E9a-E9aO!3YQ%GlO1G2VO!3yQ$I[O1G2VO'RQ$IWO,5<OOOQ$IS,5<O,5<OOOQ$IS-E9b-E9bOOQ$IS,5<V,5<VOOQ$IS-E9i-E9iOOQ$IV1G0o1G0oO/|Q$IWO'#FgO!4bQ$I[O,5=rOOQ$IS1G1V1G1VO!4yQ$IWO1G1VOOQ$IS'#DS'#DSO/gQ$IWO,5<|OOQ$IS,5<|,5<|O!5OQ$IWO'#FSO!5ZQ$IWO,59lO!5cQ$IWO1G/UO!5mQ$I[O,5=QOOQ$IS1G2k1G2kOOQ$IS,5:h,5:hO!6^Q$IWO'#GPOOQ$IS,5<P,5<POOQ$IS-E9c-E9cO!6oQ$IWO1G.fOOQ$IS1G0U1G0UO!6}Q$IWO,5=SO!7_Q$IWO,5=SO/gQ$IWO1G0eO/gQ$IWO1G0eO/|Q$IWO1G0gOOQ$IS-E9f-E9fO!7pQ$IWO1G0gO!7{Q$IWO1G0gO!8QQ$IWO,5=tO!8`Q$IWO,5=tO!8nQ$IWO,5=qO!9UQ$IWO,5=qO!9gQ$IZO1G0qO!<uQ$IZO1G0tO!@QQ$IWO,5=vO!@[Q$IWO,5=vO!@dQ$I[O,5=vO/gQ$IWO1G0vO!@nQ$IWO1G0vO3UQ$IWO1G0{ONlQ$IWO1G0}OOQ$IV,5;W,5;WO!@sQ$IYO,5;WO!@xQ$IZO1G0wO!DZQ$IWO'#FoO3UQ$IWO1G0wO3UQ$IWO1G0wO!DhQ$IWO,5=wO!DuQ$IWO,5=wO/|Q$IWO,5=wOOQ$IV1G0{1G0{O!D}Q$IWO'#EyO!E`Q%1`O1G0}OOQ$IV1G1S1G1SO3UQ$IWO1G1SOOQ$IS,5=Y,5=YOOQ$IS'#Dn'#DnO/gQ$IWO,5=YO!EhQ$IWO,5=XO!E{Q$IWO,5=XOOQ$IS1G/s1G/sO!FTQ$IWO,5=ZO!FeQ$IWO,5=ZO!FmQ$IWO,5=ZO!GQQ$IWO,5=ZO!GbQ$IWO,5=ZOOQ$IS7+%a7+%aOOQ$IS7+$e7+$eO!5cQ$IWO7+$mO!ITQ$IWO1G.yO!I[Q$IWO1G.yOOQ$IS1G/]1G/]OOQ$IS,5;p,5;pO'RQ$IWO,5;pOOQ$IS7+$}7+$}O!IcQ$IWO7+$}OOQ$IS-E9S-E9SOOQ$IS7+%O7+%OO!IsQ$IWO,5=RO'RQ$IWO,5=ROOQ$IS7+$c7+$cO!IxQ$IWO7+$}O!JQQ$IWO7+%OO!JVQ$IWO1G2qOOQ$IS7+%V7+%VO!JgQ$IWO1G2qO!JoQ$IWO7+%VOOQ$IS,5;o,5;oO'RQ$IWO,5;oO!JtQ$IWO1G2lOOQ$IS-E9R-E9RO!KkQ$IWO7+%ZOOQ$IS7+%]7+%]O!KyQ$IWO1G2lO!LhQ$IWO7+%]O!LmQ$IWO1G2rO!L}Q$IWO1G2rO!MVQ$IWO7+%ZO!M[Q$IWO,5=fO!MrQ$IWO,5=fO!MrQ$IWO,5=fO!NQO!LQO'#DwO!N]OSO'#G{OOOO1G/{1G/{O!NbQ$IWO1G/{O!NjQ%GlO7+'qO# ZQ$I[O1G1jP# tQ$IWO'#FdOOQ$IS,5<R,5<ROOQ$IS-E9e-E9eOOQ$IS7+&q7+&qOOQ$IS1G2h1G2hOOQ$IS,5;n,5;nOOQ$IS-E9Q-E9QOOQ$IS7+$p7+$pO#!RQ$IWO,5<kO#!lQ$IWO,5<kO#!}Q$I[O,5;qO##bQ$IWO1G2nOOQ$IS-E9T-E9TOOQ$IS7+&P7+&PO##rQ$IWO7+&POOQ$IS7+&R7+&RO#$QQ$IWO'#HXO/|Q$IWO7+&RO#$fQ$IWO7+&ROOQ$IS,5<U,5<UO#$qQ$IWO1G3`OOQ$IS-E9h-E9hOOQ$IS,5<Q,5<QO#%PQ$IWO1G3]OOQ$IS-E9d-E9dO#%gQ$IZO7+&]O!DZQ$IWO'#FmO3UQ$IWO7+&]O3UQ$IWO7+&`O#(uQ$I[O,5<YO'RQ$IWO,5<YO#)PQ$IWO1G3bOOQ$IS-E9l-E9lO#)ZQ$IWO1G3bO3UQ$IWO7+&bO/gQ$IWO7+&bOOQ$IV7+&g7+&gO!E`Q%1`O7+&iO#)cQ$IXO1G0rOOQ$IV-E9m-E9mO3UQ$IWO7+&cO3UQ$IWO7+&cOOQ$IV,5<Z,5<ZO#+UQ$IWO,5<ZOOQ$IV7+&c7+&cO#+aQ$IZO7+&cO#.lQ$IWO,5<[O#.wQ$IWO1G3cOOQ$IS-E9n-E9nO#/UQ$IWO1G3cO#/^Q$IWO'#H_O#/lQ$IWO'#H_O/|Q$IWO'#H_OOQ$IS'#H_'#H_O#/wQ$IWO'#H^OOQ$IS,5;e,5;eO#0PQ$IWO,5;eO/gQ$IWO'#E{OOQ$IV7+&i7+&iO3UQ$IWO7+&iOOQ$IV7+&n7+&nOOQ$IS1G2t1G2tOOQ$IS,5;s,5;sO#0UQ$IWO1G2sOOQ$IS-E9V-E9VO#0iQ$IWO,5;tO#0tQ$IWO,5;tO#1XQ$IWO1G2uOOQ$IS-E9W-E9WO#1iQ$IWO1G2uO#1qQ$IWO1G2uO#2RQ$IWO1G2uO#1iQ$IWO1G2uOOQ$IS<<HX<<HXO#2^Q$I[O1G1[OOQ$IS<<Hi<<HiP#2kQ$IWO'#FUO6|Q$IWO1G2mO#2xQ$IWO1G2mO#2}Q$IWO<<HiOOQ$IS<<Hj<<HjO#3_Q$IWO7+(]OOQ$IS<<Hq<<HqO#3oQ$I[O1G1ZP#4`Q$IWO'#FTO#4mQ$IWO7+(^O#4}Q$IWO7+(^O#5VQ$IWO<<HuO#5[Q$IWO7+(WOOQ$IS<<Hw<<HwO#6RQ$IWO,5;rO'RQ$IWO,5;rOOQ$IS-E9U-E9UOOQ$IS<<Hu<<HuOOQ$IS,5;x,5;xO/gQ$IWO,5;xO#6WQ$IWO1G3QOOQ$IS-E9[-E9[O#6nQ$IWO1G3QOOOO'#F_'#F_O#6|O!LQO,5:cOOOO,5=g,5=gOOOO7+%g7+%gO#7XQ$IWO1G2VO#7rQ$IWO1G2VP'RQ$IWO'#FVO/gQ$IWO<<IkO#8TQ$IWO,5=sO#8fQ$IWO,5=sO/|Q$IWO,5=sO#8wQ$IWO<<ImOOQ$IS<<Im<<ImO/|Q$IWO<<ImP/|Q$IWO'#FjP/gQ$IWO'#FfOOQ$IV-E9k-E9kO3UQ$IWO<<IwOOQ$IV,5<X,5<XO3UQ$IWO,5<XOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#8|Q$I[O1G1tP#9WQ$IWO'#FnO#9_Q$IWO7+(|O#9iQ$IZO<<I|O3UQ$IWO<<I|OOQ$IV<<JT<<JTO3UQ$IWO<<JTOOQ$IV'#Fl'#FlO#<tQ$IZO7+&^OOQ$IV<<I}<<I}O#>mQ$IZO<<I}OOQ$IV1G1u1G1uO/|Q$IWO1G1uO3UQ$IWO<<I}O/|Q$IWO1G1vP/gQ$IWO'#FpO#AxQ$IWO7+(}O#BVQ$IWO7+(}OOQ$IS'#Ez'#EzO/gQ$IWO,5=yO#B_Q$IWO,5=yOOQ$IS,5=y,5=yO#BjQ$IWO,5=xO#B{Q$IWO,5=xOOQ$IS1G1P1G1POOQ$IS,5;g,5;gP#CTQ$IWO'#FXO#CeQ$IWO1G1`O#CxQ$IWO1G1`O#DYQ$IWO1G1`P#DeQ$IWO'#FYO#DrQ$IWO7+(aO#ESQ$IWO7+(aO#ESQ$IWO7+(aO#E[Q$IWO7+(aO#ElQ$IWO7+(XO6|Q$IWO7+(XOOQ$ISAN>TAN>TO#FVQ$IWO<<KxOOQ$ISAN>aAN>aO/gQ$IWO1G1^O#FgQ$I[O1G1^P#FqQ$IWO'#FWOOQ$IS1G1d1G1dP#GOQ$IWO'#F^O#G]Q$IWO7+(lOOOO-E9]-E9]O#GsQ$IWO7+'qOOQ$ISAN?VAN?VO#H^Q$IWO,5<TO#HrQ$IWO1G3_OOQ$IS-E9g-E9gO#ITQ$IWO1G3_OOQ$ISAN?XAN?XO#IfQ$IWOAN?XOOQ$IVAN?cAN?cOOQ$IV1G1s1G1sO3UQ$IWOAN?hO#IkQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E9j-E9jOOQ$IV<<Ix<<IxO3UQ$IWOAN?iO3UQ$IWO7+'aOOQ$IVAN?iAN?iOOQ$IS7+'b7+'bO#LvQ$IWO<<LiOOQ$IS1G3e1G3eO/gQ$IWO1G3eOOQ$IS,5<],5<]O#MTQ$IWO1G3dOOQ$IS-E9o-E9oO#MfQ$IWO7+&zO#MvQ$IWO7+&zOOQ$IS7+&z7+&zO#NRQ$IWO<<K{O#NcQ$IWO<<K{O#NcQ$IWO<<K{O#NkQ$IWO'#GiOOQ$IS<<Ks<<KsO#NuQ$IWO<<KsOOQ$IS7+&x7+&xO/|Q$IWO1G1oP/|Q$IWO'#FiO$ `Q$IWO7+(yO$ qQ$IWO7+(yOOQ$ISG24sG24sOOQ$IVG25SG25SO3UQ$IWOG25SOOQ$IVG25TG25TOOQ$IV<<J{<<J{OOQ$IS7+)P7+)PP$!SQ$IWO'#FqOOQ$IS<<Jf<<JfO$!bQ$IWO<<JfO$!rQ$IWOANAgO$#SQ$IWOANAgO$#[Q$IWO'#GjOOQ$IS'#Gj'#GjO0hQ$IWO'#DaO$#uQ$IWO,5=TOOQ$ISANA_ANA_OOQ$IS7+'Z7+'ZO$$^Q$IWO<<LeOOQ$IVLD*nLD*nOOQ$ISAN@QAN@QO$$oQ$IWOG27RO$%PQ$IWO,59{OOQ$IS1G2o1G2oO#NkQ$IWO1G/gOOQ$IS7+%R7+%RO6|Q$IWO'#CzO6|Q$IWO,59_O6|Q$IWO,59_O6|Q$IWO,59_O$%UQ$I[O,5<kO6|Q$IWO1G.yO/gQ$IWO1G/UO/gQ$IWO7+$mP$%iQ$IWO'#FdO'RQ$IWO'#GPO$%vQ$IWO,59_O$%{Q$IWO,59_O$&SQ$IWO,59jO$&XQ$IWO1G/RO0hQ$IWO'#DOO6|Q$IWO,59g",stateData:"$&o~O$oOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuO|vO}!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$jqO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$u![O$v!]O$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aO~Oh%TXi%TXj%TXk%TXl%TXm%TXp%TXw%TXx%TX!s%TX#^%TX$j%TX$m%TX%V%TX!O%TX!R%TX!S%TX%W%TX!W%TX![%TX}%TX#V%TXq%TX!j%TX~P$_OdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~Ow%SXx%SX#^%SX$j%SX$m%SX%V%SX~Oh!oOi!pOj!nOk!nOl!qOm!rOp!sO!s%SX~P(`OT!yOl-fOs-tO|vO~P'ROT!|Ol-fOs-tO!W!}O~P'ROT#QO_#ROl-fOs-tO![#SO~P'RO%g#VO%h#XO~O%j#YO%k#XO~O!Z#[O%m#]O%q#_O~O!Z#[O%s#`O%t#_O~O!Z#[O%h#_O%v#bO~O!Z#[O%k#_O%x#dO~OT$tX]$tX_$tXf$tXh$tXi$tXj$tXk$tXl$tXm$tXp$tXw$tX!V$tX!d$tX$u$tX$v$tX$w$tX$x$tX$y$tX$z$tX${$tX$|$tX$}$tX%O$tX!O$tX!R$tX!S$tX~O%e[O%f]O%i^O%l_O%r`O%uaO%wbOx$tX!s$tX#^$tX$j$tX$m$tX%V$tX%W$tX!W$tX![$tX}$tX#V$tXq$tX!j$tX~P+uOw#iOx$sX!s$sX#^$sX$j$sX$m$sX%V$sX~Ol-fOs-tO~P'RO#^#lO$j#nO$m#nO~O%QVO~O!R#sO#l!YO#q!ZO#tlO~OltO~P'ROT#xO_#yO%QVOxtP~OT#}Ol-fOs-tO}$OO~P'ROx$QO!s$VO%V$RO#^!tX$j!tX$m!tX~OT#}Ol-fOs-tO#^!}X$j!}X$m!}X~P'ROl-fOs-tO#^#RX$j#RX$m#RX~P'RO!d$]O!m$]O%QVO~OT$gO~P'RO!S$iO#j$jO#l$kO~Ox$lO~OT$zO_$zOl-fOs-tO!O$|O~P'ROl-fOs-tOx%PO~P'RO%d%RO~O_!bOf!iO!V!kO!d!lOT`a]`ah`ai`aj`ak`al`am`ap`aw`ax`a!s`a#^`a$j`a$m`a$u`a$v`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%V`a!O`a!R`a!S`a%W`a!W`a![`a}`a#V`aq`a!j`a~Ok%WO~Ol%WO~P'ROl-fO~P'ROh-hOi-iOj-gOk-gOl-pOm-qOp-uO!O%SX!R%SX!S%SX%W%SX!W%SX![%SX}%SX#V%SX!j%SX~P(`O%W%YOw%RX!O%RX!R%RX!S%RX!W%RXx%RX~Ow%]O!O%[O!R%aO!S%`O~O!O%[O~Ow%dO!R%aO!S%`O!W%_X~O!W%hO~Ow%iOx%kO!R%aO!S%`O![%YX~O![%oO~O![%pO~O%g#VO%h%rO~O%j#YO%k%rO~OT%uOl-fOs-tO|vO~P'RO!Z#[O%m#]O%q%xO~O!Z#[O%s#`O%t%xO~O!Z#[O%h%xO%v#bO~O!Z#[O%k%xO%x#dO~OT!la]!la_!laf!lah!lai!laj!lak!lal!lam!lap!law!lax!la!V!la!d!la!s!la#^!la$j!la$m!la$u!la$v!la$w!la$x!la$y!la$z!la${!la$|!la$}!la%O!la%V!la!O!la!R!la!S!la%W!la!W!la![!la}!la#V!laq!la!j!la~P#vOw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P$_OT&POltOsuOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P'ROw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$_X$j$_X$m$_X~P'RO#^#lO$j&UO$m&UO~O!d&VOf%zX$j%zX#V%zX#^%zX$m%zX#U%zX~Of!iO$j&XO~Ohcaicajcakcalcamcapcawcaxca!sca#^ca$jca$mca%Vca!Oca!Rca!Sca%Wca!Wca![ca}ca#Vcaqca!jca~P$_Opnawnaxna#^na$jna$mna%Vna~Oh!oOi!pOj!nOk!nOl!qOm!rO!sna~PDTO%V&ZOw%UXx%UX~O%QVOw%UXx%UX~Ow&^OxtX~Ox&`O~Ow%iO#^%YX$j%YX$m%YX!O%YXx%YX![%YX!j%YX%V%YX~OT-oOl-fOs-tO|vO~P'RO%V$RO#^Sa$jSa$mSa~O%V$RO~Ow&iO#^%[X$j%[X$m%[Xk%[X~P$_Ow&lO}&kO#^#Ra$j#Ra$m#Ra~O#V&mO#^#Ta$j#Ta$m#Ta~O!d$]O!m$]O#U&oO%QVO~O#U&oO~Ow&qO#^%|X$j%|X$m%|X~Ow&sO#^%yX$j%yX$m%yXx%yX~Ow&wOk&OX~P$_Ok&zO~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO$j'PO~P'ROq'TO#g'RO#h'SOP#eaT#ead#eaf#eal#eap#eas#ea|#ea}#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea$g#ea$j#ea$z#ea${#ea%P#ea%Q#ea%e#ea%f#ea%i#ea%l#ea%r#ea%u#ea%w#ea$i#ea$m#ea~Ow'UO#V'WOx&PX~Of'YO~Of!iOx$lO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$v!]O~PNyO$vUi~PNyOT!aO]!aO_!bOf!iO!V!kO!d!lO$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$x!_O$y!_O~P!#tO$xUi$yUi~P!#tO_!bOf!iO!V!kO!d!lOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi$xUi$yUi$zUi${Ui%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~OT!aO]!aO$|!aO$}!aO%O!aO~P!&rOTUi]Ui$|Ui$}Ui%OUi~P!&rO!R%aO!S%`Ow%bX!O%bX~O%V'_O%W'_O~P+uOw'aO!O%aX~O!O'cO~Ow'dOx'fO!W%cX~Ol-fOs-tOw'dOx'gO!W%cX~P'RO!W'iO~Oj!nOk!nOl!qOm!rOhgipgiwgixgi!sgi#^gi$jgi$mgi%Vgi~Oi!pO~P!+eOigi~P!+eOh-hOi-iOj-gOk-gOl-pOm-qO~Oq'kO~P!,nOT'pOl-fOs-tO!O'qO~P'ROw'rO!O'qO~O!O'tO~O!S'vO~Ow'rO!O'wO!R%aO!S%`O~P$_Oh-hOi-iOj-gOk-gOl-pOm-qO!Ona!Rna!Sna%Wna!Wna![na}na#Vnaqna!jna~PDTOT'pOl-fOs-tO!W%_a~P'ROw'zO!W%_a~O!W'{O~Ow'zO!R%aO!S%`O!W%_a~P$_OT(POl-fOs-tO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~P'ROw(QO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~O![(TO~Ow(QO!R%aO!S%`O![%Ya~P$_Ow(WO!R%aO!S%`O![%`a~P$_Ow(ZOx%nX![%nX!j%nX~Ox(^O![(`O!j(aO~OT&POltOsuOx$si!s$si#^$si$j$si$m$si%V$si~P'ROw(bOx$si!s$si#^$si$j$si$m$si%V$si~O!d&VOf%za$j%za#V%za#^%za$m%za#U%za~O$j(gO~OT#xO_#yO%QVO~Ow&^Oxta~OltOsuO~P'ROw(QO#^%Ya$j%Ya$m%Ya!O%Yax%Ya![%Ya!j%Ya%V%Ya~P$_Ow(lO#^$sX$j$sX$m$sX%V$sX~O%V$RO#^Si$jSi$mSi~O#^%[a$j%[a$m%[ak%[a~P'ROw(oO#^%[a$j%[a$m%[ak%[a~OT(sOf(uO%QVO~O#U(vO~O%QVO#^%|a$j%|a$m%|a~Ow(xO#^%|a$j%|a$m%|a~Ol-fOs-tO#^%ya$j%ya$m%yax%ya~P'ROw({O#^%ya$j%ya$m%yax%ya~Oq)PO#a)OOP#_iT#_id#_if#_il#_ip#_is#_i|#_i}#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i$g#_i$j#_i$z#_i${#_i%P#_i%Q#_i%e#_i%f#_i%i#_i%l#_i%r#_i%u#_i%w#_i$i#_i$m#_i~Oq)QOP#biT#bid#bif#bil#bip#bis#bi|#bi}#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi$g#bi$j#bi$z#bi${#bi%P#bi%Q#bi%e#bi%f#bi%i#bi%l#bi%r#bi%u#bi%w#bi$i#bi$m#bi~OT)SOk&Oa~P'ROw)TOk&Oa~Ow)TOk&Oa~P$_Ok)XO~O$h)[O~Oq)_O#g'RO#h)^OP#eiT#eid#eif#eil#eip#eis#ei|#ei}#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei$g#ei$j#ei$z#ei${#ei%P#ei%Q#ei%e#ei%f#ei%i#ei%l#ei%r#ei%u#ei%w#ei$i#ei$m#ei~Ol-fOs-tOx$lO~P'ROl-fOs-tOx&Pa~P'ROw)eOx&Pa~OT)iO_)jO!O)mO$|)kO%QVO~Ox$lO&S)oO~OT$zO_$zOl-fOs-tO!O%aa~P'ROw)uO!O%aa~Ol-fOs-tOx)xO!W%ca~P'ROw)yO!W%ca~Ol-fOs-tOw)yOx)|O!W%ca~P'ROl-fOs-tOw)yO!W%ca~P'ROw)yOx)|O!W%ca~Oj-gOk-gOl-pOm-qOhgipgiwgi!Ogi!Rgi!Sgi%Wgi!Wgixgi![gi#^gi$jgi$mgi}gi#Vgiqgi!jgi%Vgi~Oi-iO~P!GmOigi~P!GmOT'pOl-fOs-tO!O*RO~P'ROk*TO~Ow*VO!O*RO~O!O*WO~OT'pOl-fOs-tO!W%_i~P'ROw*XO!W%_i~O!W*YO~OT(POl-fOs-tO![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~P'ROw*]O!R%aO!S%`O![%`i~Ow*`O![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~O![*aO~O_*cOl-fOs-tO![%`i~P'ROw*]O![%`i~O![*eO~OT*gOl-fOs-tOx%na![%na!j%na~P'ROw*hOx%na![%na!j%na~O!Z#[O%p*kO![!kX~O![*mO~Ox(^O![*nO~OT&POltOsuOx$sq!s$sq#^$sq$j$sq$m$sq%V$sq~P'ROw$Wix$Wi!s$Wi#^$Wi$j$Wi$m$Wi%V$Wi~P$_OT&POltOsuO~P'ROT&POl-fOs-tO#^$sa$j$sa$m$sa%V$sa~P'ROw*oO#^$sa$j$sa$m$sa%V$sa~Ow#ya#^#ya$j#ya$m#yak#ya~P$_O#^%[i$j%[i$m%[ik%[i~P'ROw*rO#^#Rq$j#Rq$m#Rq~Ow*sO#V*uO#^%{X$j%{X$m%{X!O%{X~OT*wOf*xO%QVO~O%QVO#^%|i$j%|i$m%|i~Ol-fOs-tO#^%yi$j%yi$m%yix%yi~P'ROq*|O#a)OOP#_qT#_qd#_qf#_ql#_qp#_qs#_q|#_q}#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q$g#_q$j#_q$z#_q${#_q%P#_q%Q#_q%e#_q%f#_q%i#_q%l#_q%r#_q%u#_q%w#_q$i#_q$m#_q~Ok$baw$ba~P$_OT)SOk&Oi~P'ROw+TOk&Oi~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO~P'ROw+_Ox$lO#V+_O~O#h+`OP#eqT#eqd#eqf#eql#eqp#eqs#eq|#eq}#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq$g#eq$j#eq$z#eq${#eq%P#eq%Q#eq%e#eq%f#eq%i#eq%l#eq%r#eq%u#eq%w#eq$i#eq$m#eq~O#V+aOw$dax$da~Ol-fOs-tOx&Pi~P'ROw+cOx&Pi~Ox$QO%V+eOw&RX!O&RX~O%QVOw&RX!O&RX~Ow+iO!O&QX~O!O+kO~OT$zO_$zOl-fOs-tO!O%ai~P'ROx+nOw#|a!W#|a~Ol-fOs-tOx+oOw#|a!W#|a~P'ROl-fOs-tOx)xO!W%ci~P'ROw+rO!W%ci~Ol-fOs-tOw+rO!W%ci~P'ROw+rOx+uO!W%ci~Ow#xi!O#xi!W#xi~P$_OT'pOl-fOs-tO~P'ROk+wO~OT'pOl-fOs-tO!O+xO~P'ROT'pOl-fOs-tO!W%_q~P'ROw#wi![#wi#^#wi$j#wi$m#wi!O#wix#wi!j#wi%V#wi~P$_OT(POl-fOs-tO~P'RO_*cOl-fOs-tO![%`q~P'ROw+yO![%`q~O![+zO~OT(POl-fOs-tO![%Yq#^%Yq$j%Yq$m%Yq!O%Yqx%Yq!j%Yq%V%Yq~P'ROx+{O~OT*gOl-fOs-tOx%ni![%ni!j%ni~P'ROw,QOx%ni![%ni!j%ni~O!Z#[O%p*kO![!ka~OT&POl-fOs-tO#^$si$j$si$m$si%V$si~P'ROw,SO#^$si$j$si$m$si%V$si~O%QVO#^%{a$j%{a$m%{a!O%{a~Ow,VO#^%{a$j%{a$m%{a!O%{a~O!O,YO~Ok$biw$bi~P$_OT)SO~P'ROT)SOk&Oq~P'ROq,^OP#dyT#dyd#dyf#dyl#dyp#dys#dy|#dy}#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy$g#dy$j#dy$z#dy${#dy%P#dy%Q#dy%e#dy%f#dy%i#dy%l#dy%r#dy%u#dy%w#dy$i#dy$m#dy~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$i,bO$m,bO~P'RO#h,cOP#eyT#eyd#eyf#eyl#eyp#eys#ey|#ey}#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey$g#ey$j#ey$z#ey${#ey%P#ey%Q#ey%e#ey%f#ey%i#ey%l#ey%r#ey%u#ey%w#ey$i#ey$m#ey~Ol-fOs-tOx&Pq~P'ROw,gOx&Pq~O%V+eOw&Ra!O&Ra~OT)iO_)jO$|)kO%QVO!O&Qa~Ow,kO!O&Qa~OT$zO_$zOl-fOs-tO~P'ROl-fOs-tOx,mOw#|i!W#|i~P'ROl-fOs-tOw#|i!W#|i~P'ROx,mOw#|i!W#|i~Ol-fOs-tOx)xO~P'ROl-fOs-tOx)xO!W%cq~P'ROw,pO!W%cq~Ol-fOs-tOw,pO!W%cq~P'ROp,sO!R%aO!S%`O!O%Zq!W%Zq![%Zqw%Zq~P!,nO_*cOl-fOs-tO![%`y~P'ROw#zi![#zi~P$_O_*cOl-fOs-tO~P'ROT*gOl-fOs-tO~P'ROT*gOl-fOs-tOx%nq![%nq!j%nq~P'ROT&POl-fOs-tO#^$sq$j$sq$m$sq%V$sq~P'RO#V,wOw$]a#^$]a$j$]a$m$]a!O$]a~O%QVO#^%{i$j%{i$m%{i!O%{i~Ow,yO#^%{i$j%{i$m%{i!O%{i~O!O,{O~Oq,}OP#d!RT#d!Rd#d!Rf#d!Rl#d!Rp#d!Rs#d!R|#d!R}#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R$g#d!R$j#d!R$z#d!R${#d!R%P#d!R%Q#d!R%e#d!R%f#d!R%i#d!R%l#d!R%r#d!R%u#d!R%w#d!R$i#d!R$m#d!R~Ol-fOs-tOx&Py~P'ROT)iO_)jO$|)kO%QVO!O&Qi~Ol-fOs-tOw#|q!W#|q~P'ROx-TOw#|q!W#|q~Ol-fOs-tOx)xO!W%cy~P'ROw-UO!W%cy~Ol-fOs-YO~P'ROp,sO!R%aO!S%`O!O%Zy!W%Zy![%Zyw%Zy~P!,nO%QVO#^%{q$j%{q$m%{q!O%{q~Ow-^O#^%{q$j%{q$m%{q!O%{q~OT)iO_)jO$|)kO%QVO~Ol-fOs-tOw#|y!W#|y~P'ROl-fOs-tOx)xO!W%c!R~P'ROw-aO!W%c!R~Op%^X!O%^X!R%^X!S%^X!W%^X![%^Xw%^X~P!,nOp,sO!R%aO!S%`O!O%]a!W%]a![%]aw%]a~O%QVO#^%{y$j%{y$m%{y!O%{y~Ol-fOs-tOx)xO!W%c!Z~P'ROx-dO~Ow*oO#^$sa$j$sa$m$sa%V$sa~P$_OT&POl-fOs-tO~P'ROk-kO~Ol-kO~P'ROx-lO~Oq-mO~P!,nO%f%i%u%w%e!Z%m%s%v%x%l%r%l%Q~",goto:"!,u&SPPPP&TP&])n*T*k+S+l,VP,qP&]-_-_&]P&]P0pPPPPPP0p3`PP3`P5l5u:yPP:|;[;_PPP&]&]PP;k&]PP&]&]PP&]&]&]&];o<c&]P<fP<i<i@OP@d&]PPP@h@n&TP&T&TP&TP&TP&TP&TP&T&T&TP&TPP&TPP&TP@tP@{ARP@{P@{@{PPP@{PBzPCTCZCaBzP@{CgPCnCtCzDWDjDpDzEQEnEtEzFQF[FbFhFnFtFzG^GhGnGtGzHUH[HbHhHnHxIOIYI`PPPPPPPPPIiIqIzJUJaPPPPPPPPPPPPNv! `!%n!(zPP!)S!)b!)k!*a!*W!*j!*p!*s!*v!*y!+RPPPPPPPPPP!+U!+XPPPPPPPPP!+_!+k!+w!,T!,W!,^!,d!,j!,m]iOr#l$l)[+Z'odOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uw!cP#h#u$W$f%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jy!dP#h#u$W$f$r%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j{!eP#h#u$W$f$r$s%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j}!fP#h#u$W$f$r$s$t%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!P!gP#h#u$W$f$r$s$t$u%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!R!hP#h#u$W$f$r$s$t$u$v%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!V!hP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j'oSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-u&ZUOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-u%eWOXYZhrv|}!R!S!T!X!i!k#[#i#l$O$Q$S$V$j$l$z%P%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#{uQ-b-YR-r-t'fdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'d'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uW#ol!O!P$^W#wu&^-Y-tQ$`!QQ$p!YQ$q!ZW$y!i'a)u+mS&]#x#yQ&}$kQ(e&VQ(s&mW(t&o(u(v*xU(w&q(x*yQ)g'WW)h'Y+i,k-RS+h)i)jY,U*s,V,x,y-^Q,X*uQ,d+_Q,f+aR-],wR&[#wi!vXY!S!T%]%d'r'z)O*S*V*XR%Z!uQ!zXQ%v#[Q&e$SR&h$VT-X,s-d!U!jP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jQ&Y#pR']$qR'`$yR%S!l'ncOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uT#fc#gS#]_#^S#``#aS#ba#cS#db#eT*k(^*lT(_%v(aQ$UwR+g)hX$Sw$T$U&gZkOr$l)[+ZXoOr)[+ZQ$m!WQ&u$dQ&v$eQ'X$oQ'[$qQ)Y&|Q)`'RQ)b'SQ)c'TQ)p'ZQ)r']Q*})OQ+P)PQ+Q)QQ+U)WS+W)Z)qQ+[)^Q+])_Q+^)aQ,[*|Q,]+OQ,_+VQ,`+XQ,e+`Q,|,^Q-O,cQ-P,dR-_,}WoOr)[+ZR#rnQ'Z$pR)Z&}Q+f)hR,i+gQ)q'ZR+X)ZZmOnr)[+ZQrOR#trQ&_#zR(j&_S%j#P#|S(R%j(UT(U%m&aQ%^!xQ%e!{W's%^%e'x'|Q'x%bR'|%gQ&j$WR(p&jQ(X%nQ*^(ST*d(X*^Q'b${R)v'bS'e%O%PY)z'e){+s,q-VU){'f'g'hU+s)|)}*OS,q+t+uR-V,rQ#W]R%q#WQ#Z^R%s#ZQ#^_R%w#^Q([%tS*i([*jR*j(]Q*l(^R,R*lQ#a`R%y#aQ#caR%z#cQ#ebR%{#eQ#gcR%|#gQ#jfQ&O#hW&R#j&O(m*pQ(m&dR*p-jQ$TwS&f$T&gR&g$UQ&t$bR(|&tQ&W#oR(f&WQ$^!PR&n$^Q*t(tS,W*t,zR,z,XQ&r$`R(y&rQ#mjR&T#mQ+Z)[R,a+ZQ(}&uR*{(}Q&x$fS)U&x)VR)V&yQ'Q$mR)]'QQ'V$nS)f'V+dR+d)gQ+j)lR,l+jWnOr)[+ZR#qnSqOrT+Y)[+ZWpOr)[+ZR'O$lYjOr$l)[+ZR&S#l[wOr#l$l)[+ZR&e$S&YPOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-uQ!mSQ#heQ#usU$Wx%`'vS$f!U$iQ$r!cQ$s!dQ$t!eQ$u!fQ$v!gQ$w!hQ%b!yQ%g!|Q%m#QQ%n#RQ&a#}Q&y$gQ(c&PU(n&i(o*qW)R&w)T+S+TQ*Q'pQ*Z(PQ+R)SQ+|*cR-j-oQ!xXQ!{YQ$d!SQ$e!T^'o%]%d'r'z*S*V*XR+O)O[fOr#l$l)[+Zh!uXY!S!T%]%d'r'z)O*S*V*XQ#PZQ#khS#|v|Q$Z}W$b!R$V&z)XS$n!X$jW$x!i'a)u+mQ%O!kQ%t#[`&Q#i%}(b(d(l*o,S-nQ&b$OQ&c$QQ&d$SQ'^$zQ'h%PQ'n%ZW(O%i(Q*[*`Q(S%kQ(]%uQ(h&[S(k&`-lQ(q&kQ(r&lU(z&s({*zQ)a'RY)d'U)e+b+c,gQ)s'`^)w'd)y+q+r,p-U-aQ)}'fQ*O'gS*P'k-mW*b(W*]+y+}W*f(Z*h,P,QQ+l)oQ+p)xQ+t)|Q,O*gQ,T*rQ,h+fQ,n+nQ,o+oQ,r+uQ,v+{Q-Q,iQ-S,mR-`-ThTOr#i#l$l%}&`'k(b(d)[+Z$z!tXYZhv|}!R!S!T!X!i!k#[$O$Q$S$V$j$z%P%Z%]%d%i%k%u&[&k&l&s&z'R'U'`'a'd'f'g'r'z(Q(W(Z(l({)O)X)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#vtW%T!n!r-g-qQ%U!oQ%V!pQ%X!sQ%c-fS'j%W-kQ'l-hQ'm-iQ+v*TQ,u+wS-W,s-dR-s-uU#zu-Y-tR(i&^[gOr#l$l)[+ZX!wX#[$S$VQ#UZQ$PvR$Y|Q%_!xQ%f!{Q%l#PQ'^$xQ'y%bQ'}%gQ(V%mQ(Y%nQ*_(SQ,t+vQ-[,uR-c-ZQ$XxQ'u%`R*U'vQ-Z,sR-e-dR#OYR#TZR$}!iQ${!iV)t'a)u+mR%Q!kR%v#[Q(`%vR*n(aQ$c!RQ&h$VQ)W&zR+V)XQ#plQ$[!OQ$_!PR&p$^Q(s&oQ*v(uQ*w(vR,Z*xR$a!QXpOr)[+ZQ$h!UR&{$iQ$o!XR&|$jR)n'YQ)l'YV,j+i,k-R",nodeNames:"⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",maxTerm:234,context:u,nodeProps:[[r.NodeProp.group,-14,4,80,82,83,85,87,89,91,93,94,95,97,100,103,"Statement Statement",-22,6,16,19,21,37,47,48,52,55,56,59,60,61,62,65,68,69,70,74,75,76,77,"Expression",-9,105,107,110,112,113,117,119,124,126,"Statement"]],skippedNodes:[0,2],repeatNodeCount:32,tokenData:"&AaMgR!^OX$}XY!#xY[$}[]!#x]p$}pq!#xqr!&Srs!)yst!C{tu$}uv$+}vw$.awx$/mxy$Lgyz$Mmz{$Ns{|%#c|}%$o}!O%%u!O!P%([!P!Q%3b!Q!R%6Q!R![%:S![!]%EO!]!^%Gb!^!_%Hh!_!`%KW!`!a%Ld!a!b$}!b!c& P!c!d&!_!d!e&$P!e!h&!_!h!i&.R!i!t&!_!t!u&7g!u!w&!_!w!x&,a!x!}&!_!}#O&9q#O#P!%b#P#Q&:w#Q#R&;}#R#S&!_#S#T$}#T#U&!_#U#V&$P#V#Y&!_#Y#Z&.R#Z#f&!_#f#g&7g#g#i&!_#i#j&,a#j#o&!_#o#p&=Z#p#q&>P#q#r&?]#r#s&@Z#s$g$}$g~&!_<r%`Z%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}9[&^Z%p7[%gS%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9['^Z%p7[%gS%jW%m`%v!bOr'Prs&Rsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P8z(WZ%p7[%jWOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z)UZ%p7[%gS%jW%v!bOr(yrs)wsw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*QZ%p7[%gS%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*|Z%p7[%gS%v!bOr(yrs+osw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8r+xX%p7[%gS%v!bOw+owx,ex#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r,jX%p7[Ow+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r-[X%p7[Ow+owx-wx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o7[-|R%p7[O#o-w#p#q-w#r~-w8r.[T%p7[O#o+o#o#p.k#p#q+o#q#r.k#r~+o!f.rV%gS%v!bOw.kwx/Xx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/[VOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/tUOw.kx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f0ZPO~.k!f0cV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#p.k#p~0xS0}T%gSOw0xwx1^x#O0x#O#P2P#P~0xS1aTOw0xwx1px#O0x#O#P2P#P~0xS1sSOw0xx#O0x#O#P2P#P~0xS2SPO~0x8z2[T%p7[O#o(y#o#p2k#p#q(y#q#r2k#r~(y!n2tX%gS%jW%v!bOr2krs3asw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n3hX%gS%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4[X%gS%v!bOr2krs.ksw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4|X%jWOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k!n5nX%jWOr2krs3asw2kwx6Zx#O2k#O#P7h#P#o2k#o#p7n#p~2kW6`T%jWOr6Zrs6os#O6Z#O#P7b#P~6ZW6rTOr6Zrs7Rs#O6Z#O#P7b#P~6ZW7USOr6Zs#O6Z#O#P7b#P~6ZW7ePO~6Z!n7kPO~2k!n7uX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p2k#p~8b[8iV%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P~8b[9TV%gSOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b[9oV%gSOr8brs0xsw8bwx:Ux#O8b#O#P;[#P~8b[:ZV%jWOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b[:uV%jWOr8brs9Osw8bwx6Zx#O8b#O#P;[#P~8b[;_PO~8b8z;iZ%p7[%jWOr(yrs)wsw(ywx<[x#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y7d<cX%p7[%jWOr<[rs=Os#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=TX%p7[Or<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=uX%p7[Or<[rs-ws#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d>gT%p7[O#o<[#o#p6Z#p#q<[#q#r6Z#r~<[9[>{T%p7[O#o'P#o#p?[#p#q'P#q#r?[#r~'P#O?gX%gS%jW%m`%v!bOr?[rs@Ssw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#O@]X%gS%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#OARX%gS%m`%v!bOr?[rsAnsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[!vAwV%gS%m`%v!bOwAnwx/Xx#OAn#O#PB^#P#oAn#o#pBd#p~An!vBaPO~An!vBiV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#pAn#p~0x#OCRPO~?[#OC]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p?[#p~8b9[DTZ%p7[%gS%m`%v!bOr'PrsDvsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9SERX%p7[%gS%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~Dv9SEsT%p7[O#oDv#o#pAn#p#qDv#q#rAn#r~Dv<bF_Z%p7[%jW%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bGaZ%p7[%gS%jW%sp%v!b%x#tOrGQrs)wswGQwxFSx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bHXT%p7[O#oGQ#o#pHh#p#qGQ#q#rHh#r~GQ&UHuX%gS%jW%sp%v!b%x#tOrHhrs3aswHhwxIbx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UIkX%jW%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UJaX%jW%sp%x#tOrHhrs3aswHhwxJ|x#OHh#O#PLd#P#oHh#o#pLj#p~Hh$nKVX%jW%sp%x#tOrJ|rs6oswJ|wxJ|x#OJ|#O#PKr#P#oJ|#o#pKx#p~J|$nKuPO~J|$nK}V%jWOr6Zrs6os#O6Z#O#P7b#P#o6Z#o#pJ|#p~6Z&ULgPO~Hh&ULqX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#pHh#p~8b<bMiZ%p7[%jW%sp%x#tOrGQrs)wswGQwxN[x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ:zNgZ%p7[%jW%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[:z! _T%p7[O#oN[#o#pJ|#p#qN[#q#rJ|#r~N[<r! sT%p7[O#o$}#o#p!!S#p#q$}#q#r!!S#r~$}&f!!cX%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!S&f!#RPO~!!S&f!#]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bMg!$]a%p7[%gS%jW$o1s%m`%sp%v!b%x#tOX$}XY!#xY[$}[]!#x]p$}pq!#xqr$}rs&Rsw$}wxFSx#O$}#O#P!%b#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg!%gX%p7[OY$}YZ!#xZ]$}]^!#x^#o$}#o#p!!S#p#q$}#q#r!!S#r~$}<u!&eb%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#T$}#T#U!(s#U#f$}#f#g!(s#g#h!(s#h#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!(QZjR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!)WZ!jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{!*Y_%tp%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!BPsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!+h_%p7[%gS%jW%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!,gsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!,tZ%p7[%gS%e,X%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDT!-p_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!;Rx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!.|_%p7[%gS%jW%e,X%v!bOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!-gx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!0WZ%p7[%gS%e,X%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT!1OT%p7[O#o!.o#o#p!1_#p#q!.o#q#r!1_#r~!.o-w!1j]%gS%jW%e,X%v!bOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!3Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!2lX%gS%e,X%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k-w!3`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!4Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!4`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!5Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_,a!5`X%jW%e,XOY!5XYZ6ZZ]!5X]^6Z^r!5Xrs!5{s#O!5X#O#P!6a#P~!5X,a!6QT%e,XOr6Zrs7Rs#O6Z#O#P7b#P~6Z,a!6dPO~!5X-w!6jPO~!1_-w!6v]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!1_#p~!7o,e!7xZ%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P~!7o,e!8rV%gS%e,XOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b,e!9`Z%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!:Rx#O!7o#O#P!:{#P~!7o,e!:YZ%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!5Xx#O!7o#O#P!:{#P~!7o,e!;OPO~!7oDT!;[_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!<Zx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oBm!<d]%p7[%jW%e,XOY!<ZYZ<[Z]!<Z]^<[^r!<Zrs!=]s#O!<Z#O#P!>P#P#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZBm!=dX%p7[%e,XOr<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[Bm!>UT%p7[O#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZDe!>jT%p7[O#o!+X#o#p!>y#p#q!+X#q#r!>y#r~!+X.X!?W]%gS%jW%e,X%m`%v!bOY!>yYZ?[Z]!>y]^?[^r!>yrs!@Psw!>ywx!3Xx#O!>y#O#P!@w#P#o!>y#o#p!@}#p~!>y.X!@[X%gS%e,X%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[.X!@zPO~!>y.X!AW]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!>y#p~!7oGZ!B^Z%p7[%gS%e,X%m`%v!bOr'Prs!CPsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PGZ!C`X%k#|%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvMg!D`_Q1s%p7[%gS%jW%m`%sp%v!b%x#tOY!C{YZ$}Z]!C{]^$}^r!C{rs!E_sw!C{wx#Hqx#O!C{#O#P$(i#P#o!C{#o#p$*{#p#q!C{#q#r$)]#r~!C{JP!El_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Eksw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkJP!Fz_Q1s%p7[%gS%jW%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs!E_sw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIo!HS_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#8wx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!I`_Q1s%p7[%gS%jW%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Jj_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Kisw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Kt_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Lssw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIg!MO]Q1s%p7[%gS%v!bOY!LsYZ+oZ]!Ls]^+o^w!Lswx!Mwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg!NO]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx!Nwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg# O]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx# wx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsHP#!OXQ1s%p7[OY# wYZ-wZ]# w]^-w^#o# w#o#p#!k#p#q# w#q#r#!k#r~# w1s#!pRQ1sOY#!kZ]#!k^~#!kIg##QXQ1s%p7[OY!LsYZ+oZ]!Ls]^+o^#o!Ls#o#p##m#p#q!Ls#q#r##m#r~!Ls3Z##vZQ1s%gS%v!bOY##mYZ.kZ]##m]^.k^w##mwx#$ix#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#$nZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#%ax#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#%fZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#!kx#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#&^TQ1sOY##mYZ.kZ]##m]^.k^~##m3Z#&tZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p##m#p~#'g1w#'nXQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P~#'g1w#(`XQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#({x#O#'g#O#P#)m#P~#'g1w#)QXQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#!kx#O#'g#O#P#)m#P~#'g1w#)rTQ1sOY#'gYZ0xZ]#'g]^0x^~#'gIo#*YXQ1s%p7[OY!IRYZ(yZ]!IR]^(y^#o!IR#o#p#*u#p#q!IR#q#r#*u#r~!IR3c#+Q]Q1s%gS%jW%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#,S]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#,{sw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#-U]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs##msw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#.U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#.}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#/U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#/}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u1{#0UXQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P~#/}1{#0vXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#1cs#O#/}#O#P#2T#P~#/}1{#1hXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#!ks#O#/}#O#P#2T#P~#/}1{#2YTQ1sOY#/}YZ6ZZ]#/}]^6Z^~#/}3c#2nTQ1sOY#*uYZ2kZ]#*u]^2k^~#*u3c#3W]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#*u#p~#4P2P#4YZQ1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5SZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#5usw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5|ZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#'gsw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#6vZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#7ix#O#4P#O#P#8c#P~#4P2P#7pZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#/}x#O#4P#O#P#8c#P~#4P2P#8hTQ1sOY#4PYZ8bZ]#4P]^8b^~#4PIo#9Q_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#:Px#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRHX#:Y]Q1s%p7[%jWOY#:PYZ<[Z]#:P]^<[^r#:Prs#;Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#;Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs#<Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#<Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs# ws#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#=YXQ1s%p7[OY#:PYZ<[Z]#:P]^<[^#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PJP#=|XQ1s%p7[OY!FkYZ'PZ]!Fk]^'P^#o!Fk#o#p#>i#p#q!Fk#q#r#>i#r~!Fk3s#>v]Q1s%gS%jW%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#?osw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#?z]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#@ssw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#AO]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#Awsw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3k#BSZQ1s%gS%m`%v!bOY#AwYZAnZ]#Aw]^An^w#Awwx#$ix#O#Aw#O#P#Bu#P#o#Aw#o#p#CZ#p~#Aw3k#BzTQ1sOY#AwYZAnZ]#Aw]^An^~#Aw3k#CbZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p#Aw#p~#'g3s#DYTQ1sOY#>iYZ?[Z]#>i]^?[^~#>i3s#Dr]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#>i#p~#4PJP#Ex_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Fwsw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIw#GU]Q1s%p7[%gS%m`%v!bOY#FwYZDvZ]#Fw]^Dv^w#Fwwx!Mwx#O#Fw#O#P#G}#P#o#Fw#o#p#CZ#p#q#Fw#q#r#Aw#r~#FwIw#HUXQ1s%p7[OY#FwYZDvZ]#Fw]^Dv^#o#Fw#o#p#Aw#p#q#Fw#q#r#Aw#r~#FwMV#IO_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$%]x#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#J`_Q1s%p7[%gS%jW%sp%v!b%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx#Hqx#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#KfXQ1s%p7[OY#I}YZGQZ]#I}]^GQ^#o#I}#o#p#LR#p#q#I}#q#r#LR#r~#I}6y#Lb]Q1s%gS%jW%sp%v!b%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#MZx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Mf]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#N_x#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Nj]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx$ cx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR5c$ n]Q1s%jW%sp%x#tOY$ cYZJ|Z]$ c]^J|^r$ crs#0qsw$ cwx$ cx#O$ c#O#P$!g#P#o$ c#o#p$!{#p~$ c5c$!lTQ1sOY$ cYZJ|Z]$ c]^J|^~$ c5c$#SZQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P#o#/}#o#p$ c#p~#/}6y$#zTQ1sOY#LRYZHhZ]#LR]^Hh^~#LR6y$$d]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#LR#p~#4PMV$%j_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$&ix#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}Ko$&v_Q1s%p7[%jW%sp%x#tOY$&iYZN[Z]$&i]^N[^r$&irs#;Rsw$&iwx$&ix#O$&i#O#P$'u#P#o$&i#o#p$!{#p#q$&i#q#r$ c#r~$&iKo$'|XQ1s%p7[OY$&iYZN[Z]$&i]^N[^#o$&i#o#p$ c#p#q$&i#q#r$ c#r~$&iMg$(pXQ1s%p7[OY!C{YZ$}Z]!C{]^$}^#o!C{#o#p$)]#p#q!C{#q#r$)]#r~!C{7Z$)n]Q1s%gS%jW%m`%sp%v!b%x#tOY$)]YZ!!SZ]$)]]^!!S^r$)]rs#?osw$)]wx#MZx#O$)]#O#P$*g#P#o$)]#o#p$*{#p~$)]7Z$*lTQ1sOY$)]YZ!!SZ]$)]]^!!S^~$)]7Z$+U]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p$)]#p~#4PGz$,b]$}Q%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$-nZ!s,W%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$.t]$wQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{$/|_%q`%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Jex#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk$1^_%p7[%gS%jW%e,X%sp%v!b%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Ewx#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{DT$2h_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Basw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$3t_%p7[%gS%jW%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$2]sw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$4|Z%p7[%jW%e,XOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT$5tT%p7[O#o$3g#o#p$6T#p#q$3g#q#r$6T#r~$3g-w$6`]%gS%jW%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$7Xsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$7b]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$8Zsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$8d]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$9]sw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-o$9fZ%gS%e,X%v!bOY$9]YZ.kZ]$9]]^.k^w$9]wx$:Xx#O$9]#O#P$:s#P#o$9]#o#p$:y#p~$9]-o$:^V%e,XOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k-o$:vPO~$9]-o$;QZ%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P#o$;s#o#p$9]#p~$;s,]$;zX%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P~$;s,]$<lT%e,XOw0xwx1px#O0x#O#P2P#P~0x,]$=OPO~$;s-w$=YX%jW%e,XOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k-w$=xPO~$6T-w$>U]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$6T#p~$>},e$?WZ%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@QZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$@ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@zZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$;ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$AtV%jW%e,XOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b,e$B^PO~$>}DT$Bl_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Cksw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gC{$Cv]%p7[%gS%e,X%v!bOY$CkYZ+oZ]$Ck]^+o^w$Ckwx$Dox#O$Ck#O#P$Ec#P#o$Ck#o#p$:y#p#q$Ck#q#r$9]#r~$CkC{$DvX%p7[%e,XOw+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+oC{$EhT%p7[O#o$Ck#o#p$9]#p#q$Ck#q#r$9]#r~$CkGk$FUZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$F|T%p7[O#o$0{#o#p$G]#p#q$0{#q#r$G]#r~$0{1_$Gl]%gS%jW%e,X%sp%v!b%x#tOY$G]YZHhZ]$G]]^Hh^r$G]rs$7Xsw$G]wx$Hex#O$G]#O#P$I]#P#o$G]#o#p$Ic#p~$G]1_$HpX%jW%e,X%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh1_$I`PO~$G]1_$Il]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$G]#p~$>}Gk$JrZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx$Kex#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$KtZ%h!f%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[G{$LzZf,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u$NQZ!OR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{% W_T,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSxz$}z{%!V{!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%!j]_R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%#v]$z,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%%SZwR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%&Y^${,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`!a%'U!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}B^%'iZ&S&j%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%(o_!dQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%)n!P!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%*P]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%*x!P#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%+]Z!m,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%,cg!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%,O#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%.]a%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx{$}{|%/b|}$}}!O%/b!O!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%/s]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%1Pc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%0l#S#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%2oZ!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%3u_$|R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!P$}!P!Q%4t!Q!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%5X]%OQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%6eu!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!d$}!d!e%<U!e!g$}!g!h%-z!h!l$}!l!m%2[!m!q$}!q!r%?O!r!z$}!z!{%Ar!{#O$}#O#P! n#P#R$}#R#S%:S#S#U$}#U#V%<U#V#X$}#X#Y%-z#Y#^$}#^#_%2[#_#c$}#c#d%?O#d#l$}#l#m%Ar#m#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%9Z]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%:gi!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%:S#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%<g`%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%=|`!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%?a_%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%@s_!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%BTc%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%Csc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%Ec]x1s%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`%F[!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%FoZ%WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%GuZ#^,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%H{_jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!^$}!^!_%Iz!_!`!'m!`!a!'m!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%J_]$xQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Kk]%V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Lw^jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`!a%Ms!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%NW]$yQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{& f]]Q#tP%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg&!tc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&Rsw$}wxFSx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&$fg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&,a#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&&[_%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs&'Zsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe&'hZ%p7[%gS%e,X%m`%v!bOr'Prs&(Zsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&(hX%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&)b_%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx&*ax#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk&*nZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx&+ax#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&+nZ%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&,vc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&.hg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&5u!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&5u#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&0^Z%p7[%gS%m`%v!b%r,XOr'Prs&1Psw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDe&1[Z%p7[%gS%m`%v!bOr'Prs&1}sw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&2[X%p7[%gS%w,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&3UZ%p7[%jW%sp%x#t%l,XOrGQrs)wswGQwx&3wx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk&4SZ%p7[%jW%sp%x#tOrGQrs)wswGQwx&4ux#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&5SZ%p7[%jW%u,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&6[c%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&7|k%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!h&!_!h!i&5u!i!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#U&!_#U#V&,a#V#Y&!_#Y#Z&5u#Z#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_G{&:UZ!V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&;[Z!WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz&<b]$vQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy&=dX%gS%jW!ZGmOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bGz&>d]$uQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&?nX![7_%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!SGy&@nZ%P,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}",tokenizers:[h,l,0,1,2,3,4,5,6,7,8,9,10,$],topRules:{Script:[0,3]},specialized:[{term:186,get:e=>f[e]||-1}],tokenPrec:6594});t.parser=g},925:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=1024;let r=0;const n=new WeakMap;class i{constructor({deserialize:e}={}){this.id=r++,this.deserialize=e||(()=>{throw new Error("This node type doesn't define a deserialize function")})}static string(){return new i({deserialize:e=>e})}static number(){return new i({deserialize:Number})}static flag(){return new i({deserialize:()=>!0})}set(e,t){return e[this.id]=t,e}add(e){return"function"!=typeof e&&(e=a.match(e)),t=>{let s=e(t);return void 0===s?null:[this,s]}}}i.closedBy=new i({deserialize:e=>e.split(" ")}),i.openedBy=new i({deserialize:e=>e.split(" ")}),i.group=new i({deserialize:e=>e.split(" ")});const O=Object.create(null);class a{constructor(e,t,s,r=0){this.name=e,this.props=t,this.id=s,this.flags=r}static define(e){let t=e.props&&e.props.length?Object.create(null):O,s=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),r=new a(e.name||"",t,e.id,s);if(e.props)for(let s of e.props)Array.isArray(s)||(s=s(r)),s&&s[0].set(t,s[1]);return r}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(i.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let s in e)for(let r of s.split(" "))t[r]=e[s];return e=>{for(let s=e.prop(i.group),r=-1;r<(s?s.length:0);r++){let n=t[r<0?e.name:s[r]];if(n)return n}}}}a.none=new a("",Object.create(null),0,8);class o{constructor(e){this.types=e;for(let t=0;t<e.length;t++)if(e[t].id!=t)throw new RangeError("Node type ids should correspond to array positions when creating a node set")}extend(...e){let t=[];for(let s of this.types){let r=null;for(let t of e){let e=t(s);e&&(r||(r=Object.assign({},s.props)),e[0].set(r,e[1]))}t.push(r?new a(s.name,r,s.id,s.flags):s)}return new o(t)}}class ${constructor(e,t,s,r){this.type=e,this.children=t,this.positions=s,this.length=r}toString(){let e=this.children.map((e=>e.toString())).join();return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(e.length?"("+e+")":""):e}cursor(e,t=0){let s=null!=e&&n.get(this)||this.topNode,r=new g(s);return null!=e&&(r.moveTo(e,t),n.set(this,r._tree)),r}fullCursor(){return new g(this.topNode,!0)}get topNode(){return new c(this,0,0,null)}resolve(e,t=0){return this.cursor(e,t).node}iterate(e){let{enter:t,leave:s,from:r=0,to:n=this.length}=e;for(let e=this.cursor();;){let i=!1;if(e.from<=n&&e.to>=r&&(e.type.isAnonymous||!1!==t(e.type,e.from,e.to))){if(e.firstChild())continue;e.type.isAnonymous||(i=!0)}for(;i&&s&&s(e.type,e.from,e.to),i=e.type.isAnonymous,!e.nextSibling();){if(!e.parent())return;i=!0}}}balance(e=s){return this.children.length<=P?this:x(this.type,a.none,this.children,this.positions,0,this.children.length,0,e,this.length,0)}static build(e){return function(e){var t;let{buffer:r,nodeSet:n,topID:i=0,maxBufferLength:O=s,reused:o=[],minRepeatType:c=n.types.length}=e,u=Array.isArray(r)?new m(r,r.length):r,h=n.types,f=0;function g(e,t,s,r,i){let{id:m,start:Q,end:w,size:S}=u,b=Q-e;if(S<0)return-1==S?(s.push(o[m]),r.push(b)):f=m,void u.next();let y,I,W=h[m];if(w-Q<=O&&(I=function(e,t){let s=u.fork(),r=0,n=0,i=0,a=s.end-O,o={size:0,start:0,skip:0};e:for(let O=s.pos-e;s.pos>O;){if(s.id==t){o.size=r,o.start=n,o.skip=i,i+=4,r+=4,s.next();continue}let e=s.size,$=s.pos-e;if(e<0||$<O||s.start<a)break;let l=s.id>=c?4:0,p=s.start;for(s.next();s.pos>$;){if(s.size<0)break e;s.id>=c&&(l+=4),s.next()}n=p,r+=e,i+=l}return(t<0||r==e)&&(o.size=r,o.start=n,o.skip=i),o.size>4?o:void 0}(u.pos-t,i))){let t=new Uint16Array(I.size-I.skip),s=u.pos-I.size,r=t.length;for(;u.pos>s;)r=d(I.start,t,r,i);y=new p(t,w-I.start,n,i<0?a.none:h[i]),b=I.start-e}else{let e=u.pos-S;u.next();let t=[],s=[],r=m>=c?m:-1;for(;u.pos>e;)u.id==r?u.next():g(Q,e,t,s,r);t.reverse(),s.reverse(),y=r>-1&&t.length>P?x(W,W,t,s,0,t.length,0,O,w-Q,f):l(new $(W,t,s,w-Q),f)}s.push(y),r.push(b)}function d(e,t,s,r){let{id:n,start:i,end:O,size:a}=u;if(u.next(),n==r)return s;let o=s;if(a>4){let n=u.pos-(a-4);for(;u.pos>n;)s=d(e,t,s,r)}return n<c&&(t[--s]=o,t[--s]=O-e,t[--s]=i-e,t[--s]=n),s}let Q=[],w=[];for(;u.pos>0;)g(e.start||0,0,Q,w,-1);let S=null!==(t=e.length)&&void 0!==t?t:Q.length?w[0]+Q[0].length:0;return new $(h[i],Q.reverse(),w.reverse(),S)}(e)}}function l(e,t){return t&&(e.contextHash=t),e}$.empty=new $(a.none,[],[],0);class p{constructor(e,t,s,r=a.none){this.buffer=e,this.length=t,this.set=s,this.type=r}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],s=this.buffer[e+3],r=this.set.types[t],n=r.name;if(/\W/.test(n)&&!r.isError&&(n=JSON.stringify(n)),s==(e+=4))return n;let i=[];for(;e<s;)i.push(this.childString(e)),e=this.buffer[e+3];return n+"("+i.join(",")+")"}findChild(e,t,s,r){let{buffer:n}=this,i=-1;for(let O=e;O!=t;O=n[O+3])if(-1e8!=r){let e=n[O+1],t=n[O+2];if(s>0){if(t>r&&(i=O),t>r)break}else if(e<r&&(i=O),t>=r)break}else if(i=O,s>0)break;return i}}class c{constructor(e,t,s,r){this.node=e,this.from=t,this.index=s,this._parent=r}get type(){return this.node.type}get name(){return this.node.type.name}get to(){return this.from+this.node.length}nextChild(e,t,s,r=!1){for(let n=this;;){for(let{children:i,positions:O}=n.node,a=t>0?i.length:-1;e!=a;e+=t){let a=i[e],o=O[e]+n.from;if(-1e8==s||!(t<0?o>=s:o+a.length<=s))if(a instanceof p){let r=a.findChild(0,a.buffer.length,t,-1e8==s?-1e8:s-o);if(r>-1)return new f(new h(n,a,e,o),null,r)}else if(r||!a.type.isAnonymous||d(a)){let i=new c(a,o,e,n);return r||!i.type.isAnonymous?i:i.nextChild(t<0?a.children.length-1:0,t,s)}}if(r||!n.type.isAnonymous)return null;if(e=n.index+t,n=n._parent,!n)return null}}get firstChild(){return this.nextChild(0,1,-1e8)}get lastChild(){return this.nextChild(this.node.children.length-1,-1,-1e8)}childAfter(e){return this.nextChild(0,1,e)}childBefore(e){return this.nextChild(this.node.children.length-1,-1,e)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent?this._parent.nextChild(this.index+1,1,-1):null}get prevSibling(){return this._parent?this._parent.nextChild(this.index-1,-1,-1):null}get cursor(){return new g(this)}resolve(e,t=0){return this.cursor.moveTo(e,t).node}getChild(e,t=null,s=null){let r=u(this,e,t,s);return r.length?r[0]:null}getChildren(e,t=null,s=null){return u(this,e,t,s)}toString(){return this.node.toString()}}function u(e,t,s,r){let n=e.cursor,i=[];if(!n.firstChild())return i;if(null!=s)for(;!n.type.is(s);)if(!n.nextSibling())return i;for(;;){if(null!=r&&n.type.is(r))return i;if(n.type.is(t)&&i.push(n.node),!n.nextSibling())return null==r?i:[]}}class h{constructor(e,t,s,r){this.parent=e,this.buffer=t,this.index=s,this.start=r}}class f{constructor(e,t,s){this.context=e,this._parent=t,this.index=s,this.type=e.buffer.set.types[e.buffer.buffer[s]]}get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}child(e,t){let{buffer:s}=this.context,r=s.findChild(this.index+4,s.buffer[this.index+3],e,-1e8==t?-1e8:t-this.context.start);return r<0?null:new f(this.context,this,r)}get firstChild(){return this.child(1,-1e8)}get lastChild(){return this.child(-1,-1e8)}childAfter(e){return this.child(1,e)}childBefore(e){return this.child(-1,e)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,-1)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new f(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new f(this.context,this._parent,e.findChild(t,this.index,-1,-1e8))}get cursor(){return new g(this)}resolve(e,t=0){return this.cursor.moveTo(e,t).node}toString(){return this.context.buffer.childString(this.index)}getChild(e,t=null,s=null){let r=u(this,e,t,s);return r.length?r[0]:null}getChildren(e,t=null,s=null){return u(this,e,t,s)}}class g{constructor(e,t=!1){if(this.full=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof c)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}get name(){return this.type.name}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:s,buffer:r}=this.buffer;return this.type=t||r.set.types[r.buffer[e]],this.from=s+r.buffer[e+1],this.to=s+r.buffer[e+2],!0}yield(e){return!!e&&(e instanceof c?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enter(e,t){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree.node.children.length-1:0,e,t,this.full));let{buffer:s}=this.buffer,r=s.findChild(this.index+4,s.buffer[this.index+3],e,-1e8==t?-1e8:t-this.buffer.start);return!(r<0)&&(this.stack.push(this.index),this.yieldBuf(r))}firstChild(){return this.enter(1,-1e8)}lastChild(){return this.enter(-1,-1e8)}childAfter(e){return this.enter(1,e)}childBefore(e){return this.enter(-1,e)}parent(){if(!this.buffer)return this.yieldNode(this.full?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.full?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree._parent.nextChild(this._tree.index+e,e,-1e8,this.full));let{buffer:t}=this.buffer,s=this.stack.length-1;if(e<0){let e=s<0?0:this.stack[s]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,-1e8))}else{let e=t.buffer[this.index+3];if(e<(s<0?t.buffer.length:t.buffer[this.stack[s]+3]))return this.yieldBuf(e)}return s<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,-1e8,this.full))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let t,s,{buffer:r}=this;if(r){if(e>0){if(this.index<r.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(r.buffer.buffer[e+3]<this.index)return!1;({index:t,parent:s}=r)}else({index:t,_parent:s}=this._tree);for(;s;({index:t,_parent:s}=s))for(let r=t+e,n=e<0?-1:s.node.children.length;r!=n;r+=e){let e=s.node.children[r];if(this.full||!e.type.isAnonymous||e instanceof p||d(e))return!1}return!0}move(e){if(this.enter(e,-1e8))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(){return this.move(1)}prev(){return this.move(-1)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;t<0?this.childBefore(e):this.childAfter(e);)if(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e)){this.parent();break}return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,s=0;if(e&&e.context==this.buffer)e:for(let r=this.index,n=this.stack.length;n>=0;){for(let i=e;i;i=i._parent)if(i.index==r){if(r==this.index)return i;t=i,s=n+1;break e}r=this.stack[--n]}for(let e=s;e<this.stack.length;e++)t=new f(this.buffer,t,this.stack[e]);return this.bufferNode=new f(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree.node}}function d(e){return e.children.some((e=>!e.type.isAnonymous||e instanceof p||d(e)))}class m{constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new m(this.buffer,this.index)}}const P=8;function x(e,t,s,r,n,i,O,o,p,c){let u=[],h=[];if(p<=o)for(let e=n;e<i;e++)u.push(s[e]),h.push(r[e]-O);else{let e=Math.max(o,Math.ceil(1.5*p/P));for(let p=n;p<i;){let n=p,f=r[p];for(p++;p<i&&!(r[p]+s[p].length-f>e);p++);if(p==n+1){let r=s[n];if(r instanceof $&&r.type==t&&r.length>e<<1){for(let e=0;e<r.children.length;e++)u.push(r.children[e]),h.push(r.positions[e]+f-O);continue}u.push(r)}else if(p==n+1)u.push(s[n]);else{let e=x(t,t,s,r,n,p,f,o,r[p-1]+s[p-1].length-f,c);t==a.none||Q(e.children,t)||(e=l(new $(a.none,e.children,e.positions,e.length),c)),u.push(e)}h.push(f-O)}}return l(new $(e,u,h,p),c)}function Q(e,t){for(let s of e)if(s.type==t)return!0;return!1}class w{constructor(e,t,s,r,n){this.from=e,this.to=t,this.tree=s,this.offset=r,this.open=n}get openStart(){return(1&this.open)>0}get openEnd(){return(2&this.open)>0}static applyChanges(e,t,s=128){if(!t.length)return e;let r=[],n=1,i=e.length?e[0]:null,O=0,a=0,o=0;for(;;){let $=O<t.length?t[O++]:null,l=$?$.fromA:1e9;if(l-a>=s)for(;i&&i.from<l;){let t=i;if(a>=t.from||l<=t.to||o){let e=Math.max(t.from,a)-o,s=Math.min(t.to,l)-o;t=e>=s?null:new w(e,s,t.tree,t.offset+o,(O>0?1:0)|($?2:0))}if(t&&r.push(t),i.to>l)break;i=n<e.length?e[n++]:null}if(!$)break;a=$.toA,o=$.toA-$.toB}return r}static addTree(e,t=[],s=!1){let r=[new w(0,e.length,e,0,s?2:0)];for(let s of t)s.to>e.length&&r.push(s);return r}}class S{constructor(e,t=e.length){this.string=e,this.length=t}get(e){return e<0||e>=this.length?-1:this.string.charCodeAt(e)}lineAfter(e){if(e<0)return"";let t=this.string.indexOf("\n",e);return this.string.slice(e,t<0?this.length:Math.min(t,this.length))}read(e,t){return this.string.slice(e,Math.min(this.length,t))}clip(e){return new S(this.string,e)}}t.DefaultBufferLength=s,t.NodeProp=i,t.NodeSet=o,t.NodeType=a,t.Tree=$,t.TreeBuffer=p,t.TreeCursor=g,t.TreeFragment=w,t.stringInput=function(e){return new S(e)}},774:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});var r,n=s(925);class i{constructor(e,t,s,r,n,i,O,a,o,$){this.p=e,this.stack=t,this.state=s,this.reducePos=r,this.pos=n,this.score=i,this.buffer=O,this.bufferBase=a,this.curContext=o,this.parent=$}toString(){return`[${this.stack.filter(((e,t)=>t%3==0)).concat(this.state)}]@${this.pos}${this.score?"!"+this.score:""}`}static start(e,t,s=0){let r=e.parser.context;return new i(e,[],t,s,s,0,[],0,r?new O(r,r.start):null,null)}get context(){return this.curContext?this.curContext.context:null}pushState(e,t){this.stack.push(this.state,t,this.bufferBase+this.buffer.length),this.state=e}reduce(e){let t=e>>19,s=65535&e,{parser:r}=this.p,n=r.dynamicPrecedence(s);if(n&&(this.score+=n),0==t)return s<r.minRepeatTerm&&this.storeNode(s,this.reducePos,this.reducePos,4,!0),this.pushState(r.getGoto(this.state,s,!0),this.reducePos),void this.reduceContext(s);let i=this.stack.length-3*(t-1)-(262144&e?6:0),O=this.stack[i-2],a=this.stack[i-1],o=this.bufferBase+this.buffer.length-a;if(s<r.minRepeatTerm||131072&e){let e=r.stateFlag(this.state,1)?this.pos:this.reducePos;this.storeNode(s,O,e,o+4,!0)}if(262144&e)this.state=this.stack[i];else{let e=this.stack[i-3];this.state=r.getGoto(e,s,!0)}for(;this.stack.length>i;)this.stack.pop();this.reduceContext(s)}storeNode(e,t,s,r=4,n=!1){if(0==e){let e=this,r=this.buffer.length;if(0==r&&e.parent&&(r=e.bufferBase-e.parent.bufferBase,e=e.parent),r>0&&0==e.buffer[r-4]&&e.buffer[r-1]>-1){if(t==s)return;if(e.buffer[r-2]>=t)return void(e.buffer[r-2]=s)}}if(n&&this.pos!=s){let n=this.buffer.length;if(n>0&&0!=this.buffer[n-4])for(;n>0&&this.buffer[n-2]>s;)this.buffer[n]=this.buffer[n-4],this.buffer[n+1]=this.buffer[n-3],this.buffer[n+2]=this.buffer[n-2],this.buffer[n+3]=this.buffer[n-1],n-=4,r>4&&(r-=4);this.buffer[n]=e,this.buffer[n+1]=t,this.buffer[n+2]=s,this.buffer[n+3]=r}else this.buffer.push(e,t,s,r)}shift(e,t,s){if(131072&e)this.pushState(65535&e,this.pos);else if(0==(262144&e)){let r=this.pos,n=e,{parser:i}=this.p;(s>this.pos||t<=i.maxNode)&&(this.pos=s,i.stateFlag(n,1)||(this.reducePos=s)),this.pushState(n,r),t<=i.maxNode&&this.buffer.push(t,r,s,4),this.shiftContext(t)}else t<=this.p.parser.maxNode&&this.buffer.push(t,this.pos,s,4),this.pos=s}apply(e,t,s){65536&e?this.reduce(e):this.shift(e,t,s)}useNode(e,t){let s=this.p.reused.length-1;(s<0||this.p.reused[s]!=e)&&(this.p.reused.push(e),s++);let r=this.pos;this.reducePos=this.pos=r+e.length,this.pushState(t,r),this.buffer.push(s,r,this.reducePos,-1),this.curContext&&this.updateContext(this.curContext.tracker.reuse(this.curContext.context,e,this.p.input,this))}split(){let e=this,t=e.buffer.length;for(;t>0&&e.buffer[t-2]>e.reducePos;)t-=4;let s=e.buffer.slice(t),r=e.bufferBase+t;for(;e&&r==e.bufferBase;)e=e.parent;return new i(this.p,this.stack.slice(),this.state,this.reducePos,this.pos,this.score,s,r,this.curContext,e)}recoverByDelete(e,t){let s=e<=this.p.parser.maxNode;s&&this.storeNode(e,this.pos,t),this.storeNode(0,this.pos,t,s?8:4),this.pos=this.reducePos=t,this.score-=200}canShift(e){for(let t=new a(this);;){let s=this.p.parser.stateSlot(t.top,4)||this.p.parser.hasAction(t.top,e);if(0==(65536&s))return!0;if(0==s)return!1;t.reduce(s)}}get ruleStart(){for(let e=this.state,t=this.stack.length;;){let s=this.p.parser.stateSlot(e,5);if(!(65536&s))return 0;if(t-=3*(s>>19),(65535&s)<this.p.parser.minRepeatTerm)return this.stack[t+1];e=this.stack[t]}}startOf(e,t){let s=this.state,r=this.stack.length,{parser:n}=this.p;for(;;){let i=n.stateSlot(s,5),O=i>>19,a=65535&i;if(e.indexOf(a)>-1){let e=r-3*(i>>19),s=this.stack[e+1];if(null==t||t>s)return s}if(0==r)return null;0==O?(r-=3,s=this.stack[r]):(r-=3*(O-1),s=n.getGoto(this.stack[r-3],a,!0))}}recoverByInsert(e){if(this.stack.length>=300)return[];let t=this.p.parser.nextStates(this.state);if(t.length>8||this.stack.length>=120){let s=[];for(let r,n=0;n<t.length;n+=2)(r=t[n+1])!=this.state&&this.p.parser.hasAction(r,e)&&s.push(t[n],r);if(this.stack.length<120)for(let e=0;s.length<8&&e<t.length;e+=2){let r=t[e+1];s.some(((e,t)=>1&t&&e==r))||s.push(t[e],r)}t=s}let s=[];for(let e=0;e<t.length&&s.length<4;e+=2){let r=t[e+1];if(r==this.state)continue;let n=this.split();n.storeNode(0,n.pos,n.pos,4,!0),n.pushState(r,this.pos),n.shiftContext(t[e]),n.score-=200,s.push(n)}return s}forceReduce(){let e=this.p.parser.stateSlot(this.state,5);return 0!=(65536&e)&&(this.p.parser.validAction(this.state,e)||(this.storeNode(0,this.reducePos,this.reducePos,4,!0),this.score-=100),this.reduce(e),!0)}forceAll(){for(;!this.p.parser.stateFlag(this.state,2)&&this.forceReduce(););return this}get deadEnd(){if(3!=this.stack.length)return!1;let{parser:e}=this.p;return 65535==e.data[e.stateSlot(this.state,1)]&&!e.stateSlot(this.state,4)}restart(){this.state=this.stack[0],this.stack.length=0}sameState(e){if(this.state!=e.state||this.stack.length!=e.stack.length)return!1;for(let t=0;t<this.stack.length;t+=3)if(this.stack[t]!=e.stack[t])return!1;return!0}get parser(){return this.p.parser}dialectEnabled(e){return this.p.parser.dialect.flags[e]}shiftContext(e){this.curContext&&this.updateContext(this.curContext.tracker.shift(this.curContext.context,e,this.p.input,this))}reduceContext(e){this.curContext&&this.updateContext(this.curContext.tracker.reduce(this.curContext.context,e,this.p.input,this))}emitContext(){let e=this.curContext;if(!e.tracker.strict)return;let t=this.buffer.length-1;(t<0||-2!=this.buffer[t])&&this.buffer.push(e.hash,this.reducePos,this.reducePos,-2)}updateContext(e){if(e!=this.curContext.context){let t=new O(this.curContext.tracker,e);t.hash!=this.curContext.hash&&this.emitContext(),this.curContext=t}}}class O{constructor(e,t){this.tracker=e,this.context=t,this.hash=e.hash(t)}}!function(e){e[e.Token=200]="Token",e[e.Reduce=100]="Reduce",e[e.MaxNext=4]="MaxNext",e[e.MaxInsertStackDepth=300]="MaxInsertStackDepth",e[e.DampenInsertStackDepth=120]="DampenInsertStackDepth"}(r||(r={}));class a{constructor(e){this.stack=e,this.top=e.state,this.rest=e.stack,this.offset=this.rest.length}reduce(e){let t=65535&e,s=e>>19;0==s?(this.rest==this.stack.stack&&(this.rest=this.rest.slice()),this.rest.push(this.top,0,0),this.offset+=3):this.offset-=3*(s-1);let r=this.stack.p.parser.getGoto(this.rest[this.offset-3],t,!0);this.top=r}}class o{constructor(e,t,s){this.stack=e,this.pos=t,this.index=s,this.buffer=e.buffer,0==this.index&&this.maybeNext()}static create(e){return new o(e,e.bufferBase+e.buffer.length,e.buffer.length)}maybeNext(){let e=this.stack.parent;null!=e&&(this.index=this.stack.bufferBase-e.bufferBase,this.stack=e,this.buffer=e.buffer)}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}next(){this.index-=4,this.pos-=4,0==this.index&&this.maybeNext()}fork(){return new o(this.stack,this.pos,this.index)}}class ${constructor(){this.start=-1,this.value=-1,this.end=-1}accept(e,t){this.value=e,this.end=t}}class l{constructor(e,t){this.data=e,this.id=t}token(e,t,s){!function(e,t,s,r,n){let i=0,O=1<<n,a=r.p.parser.dialect;e:for(let n=s.start;0!=(O&e[i]);){let o=e[i+1];for(let t=i+3;t<o;t+=2)if((e[t+1]&O)>0){let i=e[t];if(a.allows(i)&&(-1==s.value||s.value==i||r.p.parser.overrides(i,s.value))){s.accept(i,n);break}}let $=t.get(n++);for(let t=0,s=e[i+2];t<s;){let r=t+s>>1,n=o+r+(r<<1),O=e[n],a=e[n+1];if($<O)s=r;else{if(!($>=a)){i=e[n+2];continue e}t=r+1}}break}}(this.data,e,t,s,this.id)}}function p(e,t=Uint16Array){if("string"!=typeof e)return e;let s=null;for(let r=0,n=0;r<e.length;){let i=0;for(;;){let t=e.charCodeAt(r++),s=!1;if(126==t){i=65535;break}t>=92&&t--,t>=34&&t--;let n=t-32;if(n>=46&&(n-=46,s=!0),i+=n,s)break;i*=46}s?s[n++]=i:s=new t(i)}return s}l.prototype.contextual=l.prototype.fallback=l.prototype.extend=!1;const c="undefined"!=typeof process&&/\bparse\b/.test(process.env.LOG);let u=null;function h(e,t,s){let r=e.cursor(t);for(;;)if(!(s<0?r.childBefore(t):r.childAfter(t)))for(;;){if((s<0?r.to<t:r.from>t)&&!r.type.isError)return s<0?Math.max(0,Math.min(r.to-1,t-5)):Math.min(e.length,Math.max(r.from+1,t+5));if(s<0?r.prevSibling():r.nextSibling())break;if(!r.parent())return s<0?0:e.length}}class f{constructor(e){this.fragments=e,this.i=0,this.fragment=null,this.safeFrom=-1,this.safeTo=-1,this.trees=[],this.start=[],this.index=[],this.nextFragment()}nextFragment(){let e=this.fragment=this.i==this.fragments.length?null:this.fragments[this.i++];if(e){for(this.safeFrom=e.openStart?h(e.tree,e.from+e.offset,1)-e.offset:e.from,this.safeTo=e.openEnd?h(e.tree,e.to+e.offset,-1)-e.offset:e.to;this.trees.length;)this.trees.pop(),this.start.pop(),this.index.pop();this.trees.push(e.tree),this.start.push(-e.offset),this.index.push(0),this.nextStart=this.safeFrom}else this.nextStart=1e9}nodeAt(e){if(e<this.nextStart)return null;for(;this.fragment&&this.safeTo<=e;)this.nextFragment();if(!this.fragment)return null;for(;;){let t=this.trees.length-1;if(t<0)return this.nextFragment(),null;let s=this.trees[t],r=this.index[t];if(r==s.children.length){this.trees.pop(),this.start.pop(),this.index.pop();continue}let i=s.children[r],O=this.start[t]+s.positions[r];if(O>e)return this.nextStart=O,null;if(O==e&&O+i.length<=this.safeTo)return O==e&&O>=this.safeFrom?i:null;i instanceof n.TreeBuffer?(this.index[t]++,this.nextStart=O+i.length):(this.index[t]++,O+i.length>=e&&(this.trees.push(i),this.start.push(O),this.index.push(0)))}}}class g extends ${constructor(){super(...arguments),this.extended=-1,this.mask=0,this.context=0}clear(e){this.start=e,this.value=this.extended=-1}}const d=new $;class m{constructor(e){this.tokens=[],this.mainToken=d,this.actions=[],this.tokens=e.tokenizers.map((e=>new g))}getActions(e,t){let s=0,r=null,{parser:n}=e.p,{tokenizers:i}=n,O=n.stateSlot(e.state,3),a=e.curContext?e.curContext.hash:0;for(let n=0;n<i.length;n++){if(0==(1<<n&O))continue;let o=i[n],$=this.tokens[n];if((!r||o.fallback)&&((o.contextual||$.start!=e.pos||$.mask!=O||$.context!=a)&&(this.updateCachedToken($,o,e,t),$.mask=O,$.context=a),0!=$.value)){let t=s;if($.extended>-1&&(s=this.addActions(e,$.extended,$.end,s)),s=this.addActions(e,$.value,$.end,s),!o.extend&&(r=$,s>t))break}}for(;this.actions.length>s;)this.actions.pop();return r||(r=d,r.start=e.pos,e.pos==t.length?r.accept(e.p.parser.eofTerm,e.pos):r.accept(0,e.pos+1)),this.mainToken=r,this.actions}updateCachedToken(e,t,s,r){if(e.clear(s.pos),t.token(r,e,s),e.value>-1){let{parser:t}=s.p;for(let n=0;n<t.specialized.length;n++)if(t.specialized[n]==e.value){let i=t.specializers[n](r.read(e.start,e.end),s);if(i>=0&&s.p.parser.dialect.allows(i>>1)){0==(1&i)?e.value=i>>1:e.extended=i>>1;break}}}else s.pos==r.length?e.accept(s.p.parser.eofTerm,s.pos):e.accept(0,s.pos+1)}putAction(e,t,s,r){for(let t=0;t<r;t+=3)if(this.actions[t]==e)return r;return this.actions[r++]=e,this.actions[r++]=t,this.actions[r++]=s,r}addActions(e,t,s,r){let{state:n}=e,{parser:i}=e.p,{data:O}=i;for(let e=0;e<2;e++)for(let a=i.stateSlot(n,e?2:1);;a+=3){if(65535==O[a]){if(1!=O[a+1]){0==r&&2==O[a+1]&&(r=this.putAction(y(O,a+1),t,s,r));break}a=y(O,a+2)}O[a]==t&&(r=this.putAction(y(O,a+1),t,s,r))}return r}}var P;!function(e){e[e.Distance=5]="Distance",e[e.MaxRemainingPerStep=3]="MaxRemainingPerStep",e[e.MinBufferLengthPrune=200]="MinBufferLengthPrune",e[e.ForceReduceLimit=10]="ForceReduceLimit"}(P||(P={}));class x{constructor(e,t,s,r){this.parser=e,this.input=t,this.startPos=s,this.context=r,this.pos=0,this.recovering=0,this.nextStackID=9812,this.nested=null,this.nestEnd=0,this.nestWrap=null,this.reused=[],this.tokens=new m(e),this.topTerm=e.top[1],this.stacks=[i.start(this,e.top[0],this.startPos)];let n=null==r?void 0:r.fragments;this.fragments=n&&n.length?new f(n):null}advance(){if(this.nested){let e=this.nested.advance();return this.pos=this.nested.pos,e&&(this.finishNested(this.stacks[0],e),this.nested=null),null}let e,t,s,r=this.stacks,n=this.pos,i=this.stacks=[];for(let O=0;O<r.length;O++){let a,o=r[O];for(;;){if(o.pos>n)i.push(o);else if(a=this.checkNest(o))(!s||s.stack.score<o.score)&&(s=a);else{if(this.advanceStack(o,i,r))continue;{e||(e=[],t=[]),e.push(o);let s=this.tokens.mainToken;t.push(s.value,s.end)}}break}}if(s)return this.startNested(s),null;if(!i.length){let t=e&&function(e){let t=null;for(let s of e)s.pos==s.p.input.length&&s.p.parser.stateFlag(s.state,2)&&(!t||t.score<s.score)&&(t=s);return t}(e);if(t)return this.stackToTree(t);if(this.parser.strict)throw c&&e&&console.log("Stuck with token "+this.parser.getName(this.tokens.mainToken.value)),new SyntaxError("No parse at "+n);this.recovering||(this.recovering=5)}if(this.recovering&&e){let s=this.runRecovery(e,t,i);if(s)return this.stackToTree(s.forceAll())}if(this.recovering){let e=1==this.recovering?1:3*this.recovering;if(i.length>e)for(i.sort(((e,t)=>t.score-e.score));i.length>e;)i.pop();i.some((e=>e.reducePos>n))&&this.recovering--}else if(i.length>1)e:for(let e=0;e<i.length-1;e++){let t=i[e];for(let s=e+1;s<i.length;s++){let r=i[s];if(t.sameState(r)||t.buffer.length>200&&r.buffer.length>200){if(!((t.score-r.score||t.buffer.length-r.buffer.length)>0)){i.splice(e--,1);continue e}i.splice(s--,1)}}}this.pos=i[0].pos;for(let e=1;e<i.length;e++)i[e].pos<this.pos&&(this.pos=i[e].pos);return null}advanceStack(e,t,s){let r=e.pos,{input:i,parser:O}=this,a=c?this.stackID(e)+" -> ":"";if(this.fragments){let t=e.curContext&&e.curContext.tracker.strict,s=t?e.curContext.hash:0;for(let i=this.fragments.nodeAt(r);i;){let r=this.parser.nodeSet.types[i.type.id]==i.type?O.getGoto(e.state,i.type.id):-1;if(r>-1&&i.length&&(!t||(i.contextHash||0)==s))return e.useNode(i,r),c&&console.log(a+this.stackID(e)+` (via reuse of ${O.getName(i.type.id)})`),!0;if(!(i instanceof n.Tree)||0==i.children.length||i.positions[0]>0)break;let o=i.children[0];if(!(o instanceof n.Tree))break;i=o}}let o=O.stateSlot(e.state,4);if(o>0)return e.reduce(o),c&&console.log(a+this.stackID(e)+` (via always-reduce ${O.getName(65535&o)})`),!0;let $=this.tokens.getActions(e,i);for(let n=0;n<$.length;){let i=$[n++],o=$[n++],l=$[n++],p=n==$.length||!s,u=p?e:e.split();if(u.apply(i,o,l),c&&console.log(a+this.stackID(u)+` (via ${0==(65536&i)?"shift":`reduce of ${O.getName(65535&i)}`} for ${O.getName(o)} @ ${r}${u==e?"":", split"})`),p)return!0;u.pos>r?t.push(u):s.push(u)}return!1}advanceFully(e,t){let s=e.pos;for(;;){let r=this.checkNest(e);if(r)return r;if(!this.advanceStack(e,null,null))return!1;if(e.pos>s)return Q(e,t),!0}}runRecovery(e,t,s){let r,n=null,i=!1;for(let O=0;O<e.length;O++){let a=e[O],o=t[O<<1],$=t[1+(O<<1)],l=c?this.stackID(a)+" -> ":"";if(a.deadEnd){if(i)continue;i=!0,a.restart(),c&&console.log(l+this.stackID(a)+" (restarted)");let e=this.advanceFully(a,s);if(e){!0!==e&&(r=e);continue}}let p=a.split(),u=l;for(let e=0;p.forceReduce()&&e<10;e++){c&&console.log(u+this.stackID(p)+" (via force-reduce)");let e=this.advanceFully(p,s);if(e){!0!==e&&(r=e);break}c&&(u=this.stackID(p)+" -> ")}for(let e of a.recoverByInsert(o))c&&console.log(l+this.stackID(e)+" (via recover-insert)"),this.advanceFully(e,s);this.input.length>a.pos?($==a.pos&&($++,o=0),a.recoverByDelete(o,$),c&&console.log(l+this.stackID(a)+` (via recover-delete ${this.parser.getName(o)})`),Q(a,s)):(!n||n.score<a.score)&&(n=a)}if(n)return n;if(r)for(let e of this.stacks)if(e.score>r.stack.score){r=void 0;break}return r&&this.startNested(r),null}forceFinish(){let e=this.stacks[0].split();return this.nested&&this.finishNested(e,this.nested.forceFinish()),this.stackToTree(e.forceAll())}stackToTree(e,t=e.pos){return this.parser.context&&e.emitContext(),n.Tree.build({buffer:o.create(e),nodeSet:this.parser.nodeSet,topID:this.topTerm,maxBufferLength:this.parser.bufferLength,reused:this.reused,start:this.startPos,length:t-this.startPos,minRepeatType:this.parser.minRepeatTerm})}checkNest(e){let t=this.parser.findNested(e.state);if(!t)return null;let s=t.value;return"function"==typeof s&&(s=s(this.input,e)),s?{stack:e,info:t,spec:s}:null}startNested(e){let{stack:t,info:s,spec:r}=e;this.stacks=[t],this.nestEnd=this.scanForNestEnd(t,s.end,r.filterEnd),this.nestWrap="number"==typeof r.wrapType?this.parser.nodeSet.types[r.wrapType]:r.wrapType||null,r.startParse?this.nested=r.startParse(this.input.clip(this.nestEnd),t.pos,this.context):this.finishNested(t)}scanForNestEnd(e,t,s){for(let r=e.pos;r<this.input.length;r++)if(d.start=r,d.value=-1,t.token(this.input,d,e),d.value>-1&&(!s||s(this.input.read(r,d.end))))return r;return this.input.length}finishNested(e,t){this.nestWrap?t=new n.Tree(this.nestWrap,t?[t]:[],t?[0]:[],this.nestEnd-e.pos):t||(t=new n.Tree(n.NodeType.none,[],[],this.nestEnd-e.pos));let s=this.parser.findNested(e.state);e.useNode(t,this.parser.getGoto(e.state,s.placeholder,!0)),c&&console.log(this.stackID(e)+" (via unnest)")}stackID(e){let t=(u||(u=new WeakMap)).get(e);return t||u.set(e,t=String.fromCodePoint(this.nextStackID++)),t+e}}function Q(e,t){for(let s=0;s<t.length;s++){let r=t[s];if(r.pos==e.pos&&r.sameState(e))return void(t[s].score<e.score&&(t[s]=e))}t.push(e)}class w{constructor(e,t,s){this.source=e,this.flags=t,this.disabled=s}allows(e){return!this.disabled||0==this.disabled[e]}}const S=e=>e;class b{constructor(e){if(this.bufferLength=n.DefaultBufferLength,this.strict=!1,this.cachedDialect=null,13!=e.version)throw new RangeError(`Parser version (${e.version}) doesn't match runtime version (13)`);let t=p(e.tokenData),s=e.nodeNames.split(" ");this.minRepeatTerm=s.length,this.context=e.context;for(let t=0;t<e.repeatNodeCount;t++)s.push("");let r=[];for(let e=0;e<s.length;e++)r.push([]);function i(e,t,s){r[e].push([t,t.deserialize(String(s))])}if(e.nodeProps)for(let t of e.nodeProps){let e=t[0];for(let s=1;s<t.length;){let r=t[s++];if(r>=0)i(r,e,t[s++]);else{let n=t[s+-r];for(let O=-r;O>0;O--)i(t[s++],e,n);s++}}}if(this.specialized=new Uint16Array(e.specialized?e.specialized.length:0),this.specializers=[],e.specialized)for(let t=0;t<e.specialized.length;t++)this.specialized[t]=e.specialized[t].term,this.specializers[t]=e.specialized[t].get;this.states=p(e.states,Uint32Array),this.data=p(e.stateData),this.goto=p(e.goto);let O=Object.keys(e.topRules).map((t=>e.topRules[t][1]));this.nodeSet=new n.NodeSet(s.map(((t,s)=>n.NodeType.define({name:s>=this.minRepeatTerm?void 0:t,id:s,props:r[s],top:O.indexOf(s)>-1,error:0==s,skipped:e.skippedNodes&&e.skippedNodes.indexOf(s)>-1})))),this.maxTerm=e.maxTerm,this.tokenizers=e.tokenizers.map((e=>"number"==typeof e?new l(t,e):e)),this.topRules=e.topRules,this.nested=(e.nested||[]).map((([e,t,s,r])=>({name:e,value:t,end:new l(p(s),0),placeholder:r}))),this.dialects=e.dialects||{},this.dynamicPrecedences=e.dynamicPrecedences||null,this.tokenPrecTable=e.tokenPrec,this.termNames=e.termNames||null,this.maxNode=this.nodeSet.types.length-1,this.dialect=this.parseDialect(),this.top=this.topRules[Object.keys(this.topRules)[0]]}parse(e,t=0,s={}){"string"==typeof e&&(e=n.stringInput(e));let r=new x(this,e,t,s);for(;;){let e=r.advance();if(e)return e}}startParse(e,t=0,s={}){return"string"==typeof e&&(e=n.stringInput(e)),new x(this,e,t,s)}getGoto(e,t,s=!1){let r=this.goto;if(t>=r[0])return-1;for(let n=r[t+1];;){let t=r[n++],i=1&t,O=r[n++];if(i&&s)return O;for(let s=n+(t>>1);n<s;n++)if(r[n]==e)return O;if(i)return-1}}hasAction(e,t){let s=this.data;for(let r=0;r<2;r++)for(let n,i=this.stateSlot(e,r?2:1);;i+=3){if(65535==(n=s[i])){if(1!=s[i+1]){if(2==s[i+1])return y(s,i+2);break}n=s[i=y(s,i+2)]}if(n==t||0==n)return y(s,i+1)}return 0}stateSlot(e,t){return this.states[6*e+t]}stateFlag(e,t){return(this.stateSlot(e,0)&t)>0}findNested(e){let t=this.stateSlot(e,0);return 4&t?this.nested[t>>10]:null}validAction(e,t){if(t==this.stateSlot(e,4))return!0;for(let s=this.stateSlot(e,1);;s+=3){if(65535==this.data[s]){if(1!=this.data[s+1])return!1;s=y(this.data,s+2)}if(t==y(this.data,s+1))return!0}}nextStates(e){let t=[];for(let s=this.stateSlot(e,1);;s+=3){if(65535==this.data[s]){if(1!=this.data[s+1])break;s=y(this.data,s+2)}if(0==(1&this.data[s+2])){let e=this.data[s+1];t.some(((t,s)=>1&s&&t==e))||t.push(this.data[s],e)}}return t}overrides(e,t){let s=I(this.data,this.tokenPrecTable,t);return s<0||I(this.data,this.tokenPrecTable,e)<s}configure(e){let t=Object.assign(Object.create(b.prototype),this);if(e.props&&(t.nodeSet=this.nodeSet.extend(...e.props)),e.top){let s=this.topRules[e.top];if(!s)throw new RangeError(`Invalid top rule name ${e.top}`);t.top=s}return e.tokenizers&&(t.tokenizers=this.tokenizers.map((t=>{let s=e.tokenizers.find((e=>e.from==t));return s?s.to:t}))),e.dialect&&(t.dialect=this.parseDialect(e.dialect)),e.nested&&(t.nested=this.nested.map((t=>Object.prototype.hasOwnProperty.call(e.nested,t.name)?{name:t.name,value:e.nested[t.name],end:t.end,placeholder:t.placeholder}:t))),null!=e.strict&&(t.strict=e.strict),null!=e.bufferLength&&(t.bufferLength=e.bufferLength),t}getName(e){return this.termNames?this.termNames[e]:String(e<=this.maxNode&&this.nodeSet.types[e].name||e)}get eofTerm(){return this.maxNode+1}get hasNested(){return this.nested.length>0}get topNode(){return this.nodeSet.types[this.top[1]]}dynamicPrecedence(e){let t=this.dynamicPrecedences;return null==t?0:t[e]||0}parseDialect(e){if(this.cachedDialect&&this.cachedDialect.source==e)return this.cachedDialect;let t=Object.keys(this.dialects),s=t.map((()=>!1));if(e)for(let r of e.split(" ")){let e=t.indexOf(r);e>=0&&(s[e]=!0)}let r=null;for(let e=0;e<t.length;e++)if(!s[e])for(let s,n=this.dialects[t[e]];65535!=(s=this.data[n++]);)(r||(r=new Uint8Array(this.maxTerm+1)))[s]=1;return this.cachedDialect=new w(e,s,r)}static deserialize(e){return new b(e)}}function y(e,t){return e[t]|e[t+1]<<16}function I(e,t,s){for(let r,n=t;65535!=(r=e[n]);n++)if(r==s)return n-t;return-1}t.NodeProp=n.NodeProp,t.NodeSet=n.NodeSet,t.NodeType=n.NodeType,t.Tree=n.Tree,t.TreeCursor=n.TreeCursor,t.ContextTracker=class{constructor(e){this.start=e.start,this.shift=e.shift||S,this.reduce=e.reduce||S,this.reuse=e.reuse||S,this.hash=e.hash,this.strict=!1!==e.strict}},t.ExternalTokenizer=class{constructor(e,t={}){this.token=e,this.contextual=!!t.contextual,this.fallback=!!t.fallback,this.extend=!!t.extend}},t.Parser=b,t.Stack=i,t.Token=$},142:(e,t)=>{var s,r;Object.defineProperty(t,"__esModule",{value:!0}),t.UniOp=t.BinOp=void 0,(r=t.BinOp||(t.BinOp={}))[r.Plus=0]="Plus",r[r.Minus=1]="Minus",r[r.Mul=2]="Mul",r[r.IDiv=3]="IDiv",r[r.Mod=4]="Mod",r[r.Eq=5]="Eq",r[r.Neq=6]="Neq",r[r.Lte=7]="Lte",r[r.Gte=8]="Gte",r[r.Lt=9]="Lt",r[r.Gt=10]="Gt",r[r.Is=11]="Is",r[r.And=12]="And",r[r.Or=13]="Or",(s=t.UniOp||(t.UniOp={}))[s.Neg=0]="Neg",s[s.Not=1]="Not"},244:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.compile=t.makeLocals=t.emptyEnv=void 0;const r=s(142),n=s(591);function i(e){const t=[];return e.forEach((e=>{t.push(`(local $${e} i32)`)})),t}function O(e,t){switch(e.tag){case"store":return[...o(e.start,t),...o(e.offset,t),...o(e.value,t),"call $store"];case"assign":var s=a(e.value,t);return t.locals.has(e.name)?s.concat([`(local.set $${e.name})`]):s.concat([`(global.set $${e.name})`]);case"return":return(s=o(e.value,t)).push("return"),s;case"expr":return a(e.expr,t).concat(["(local.set $$last)"]);case"pass":return[];case"ifjmp":const r=t.labels.findIndex((t=>t===e.thn)),n=t.labels.findIndex((t=>t===e.els));return[...o(e.cond,t),`(if \n          (then\n            (local.set $$selector (i32.const ${r}))\n            (br $loop)\n          ) \n          (else \n            (local.set $$selector (i32.const ${n}))\n            (br $loop)\n          )\n         )`];case"jmp":return[`(local.set $$selector (i32.const ${t.labels.findIndex((t=>t===e.lbl))}))`,"(br $loop)"]}}function a(e,t){switch(e.tag){case"value":return o(e.value,t);case"binop":return[...o(e.left,t),...o(e.right,t),$(e.op)];case"uniop":const O=o(e.expr,t);switch(e.op){case r.UniOp.Neg:return["(i32.const 0)",...O,"(i32.sub)"];case r.UniOp.Not:return["(i32.const 0)",...O,"(i32.eq)"]}case"builtin1":const a=e.a[0],l=o(e.arg,t);var s=e.name;return"print"===e.name&&a===n.NUM?s="print_num":"print"===e.name&&a===n.BOOL?s="print_bool":"print"===e.name&&a===n.NONE&&(s="print_none"),l.concat([`(call $${s})`]);case"builtin2":return[...o(e.left,t),...o(e.right,t),`(call $${e.name})`];case"call":var i=e.arguments.map((e=>o(e,t))).flat();return i.push(`(call $${e.name})`),i;case"alloc":return[...o(e.amount,t),"call $alloc"];case"load":return[...o(e.start,t),"call $assert_not_none",...o(e.offset,t),"call $load"]}}function o(e,t){switch(e.tag){case"num":case"wasmint":return["(i32.const "+e.value+")"];case"bool":return[`(i32.const ${Number(e.value)})`];case"none":return["(i32.const 0)"];case"id":return t.locals.has(e.name)?[`(local.get $${e.name})`]:[`(global.get $${e.name})`]}}function $(e){switch(e){case r.BinOp.Plus:return"(i32.add)";case r.BinOp.Minus:return"(i32.sub)";case r.BinOp.Mul:return"(i32.mul)";case r.BinOp.IDiv:return"(i32.div_s)";case r.BinOp.Mod:return"(i32.rem_s)";case r.BinOp.Eq:return"(i32.eq)";case r.BinOp.Neq:return"(i32.ne)";case r.BinOp.Lte:return"(i32.le_s)";case r.BinOp.Gte:return"(i32.ge_s)";case r.BinOp.Lt:return"(i32.lt_s)";case r.BinOp.Gt:return"(i32.gt_s)";case r.BinOp.Is:return"(i32.eq)";case r.BinOp.And:return"(i32.and)";case r.BinOp.Or:return"(i32.or)"}}function l(e,t){const s=o(e.value,t);return t.locals.has(e.name)?[...s,`(local.set $${e.name})`]:[...s,`(global.set $${e.name})`]}function p(e,t){var s=new Set;e.inits.forEach((e=>s.add(e.name))),s.add("$last"),s.add("$selector"),s.forEach(t.locals.add,t.locals),e.parameters.forEach((e=>t.locals.add(e.name))),t.labels=e.body.map((e=>e.label));const r=i(s).join("\n"),n=e.inits.map((e=>l(e,t))).flat().join("\n");var a=e.parameters.map((e=>`(param $${e.name} i32)`)).join(" "),o="(local.set $$selector (i32.const 0))\n";o+="(loop $loop\n";var $="(local.get $$selector)\n";return $+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{$=`(block ${e.label}\n              ${$}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>O(e,t).join("\n"))).join("\n")}\n            `})),o+=$,o+=") ;; end $loop",t.locals.clear(),[`(func $${e.name} ${a} (result i32)\n    ${r}\n    ${n}\n    ${o}\n    (i32.const 0)\n    (return))`]}t.emptyEnv={globals:new Map,classes:new Map,locals:new Set,labels:[],offset:0},t.makeLocals=i,t.compile=function(e,t){const s=t,r=new Set;r.add("$last"),r.add("$selector"),r.forEach(t.locals.add,t.locals);const n=i(r),a=e.inits.map((e=>e.name));console.log(e.inits,a);const o=[];e.funs.forEach((e=>{o.push(p(e,s).join("\n"))}));const $=e.classes.map((e=>function(e,t){const s=[...e.methods];return s.forEach((t=>t.name=`${e.name}$${t.name}`)),s.map((e=>p(e,t))).flat()}(e,s))).flat(),c=o.concat($).join("\n\n"),u=e.inits.map((e=>l(e,s))).flat();s.labels=e.body.map((e=>e.label));var h="(local.set $$selector (i32.const 0))\n";h+="(loop $loop\n";var f="(local.get $$selector)\n";f+=`(br_table ${e.body.map((e=>e.label)).join(" ")})`,e.body.forEach((e=>{f=`(block ${e.label}\n              ${f}    \n            ) ;; end ${e.label}\n            ${e.stmts.map((e=>O(e,s).join("\n"))).join("\n")}\n            `})),h+=f;const g=[...n,...u,h+=") ;; end $loop"];return s.locals.clear(),{globals:a,functions:c,mainSource:g.join("\n"),newEnv:s}}},440:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RunTimeError=t.ParseError=t.ReferenceError=t.TypeCheckError=t.CompileTimeError=void 0;class s extends Error{constructor(e){const t=new.target.prototype;super(e),this.__proto__=t}}t.CompileTimeError=s,t.TypeCheckError=class extends s{constructor(e){super("TYPE ERROR: "+e)}},t.ReferenceError=class extends s{constructor(e){super("REFERENCE ERROR: "+e)}},t.ParseError=class extends s{constructor(e,t){const s=new.target.prototype;super("PARSE ERROR: "+e+"at line "+t.toString()),this.__proto__=s}};class r extends Error{constructor(e){const t=new.target.prototype;super("RUNTIME ERROR: "+e),this.__proto__=t}}t.RunTimeError=r},850:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lowerProgram=void 0;const s=new Map;function r(e){if(s.has(e)){var t=s.get(e);return s.set(e,t+1),e+(t+1)}return s.set(e,1),e+1}function n(e,t){return e.map((e=>function(e,t){var s=[],n={a:e.a,label:r("$startFun"),stmts:[]};s.push(n);var O=o(e.body,s,t);return{...e,inits:[...O,...i(e.inits)],body:s}}(e,t))).flat()}function i(e,t){return e.map((e=>{return t=e,{...t,value:a(t.value)};var t}))}function O(e,t){return e.map((e=>function(e,t){return{...e,fields:i(e.fields),methods:n(e.methods,t)}}(e,t)))}function a(e){switch(e.tag){case"num":return{...e,value:BigInt(e.value)};case"bool":case"none":return e}}function o(e,t,s){var n=[];return e.forEach((e=>{n.push(...function(e,t,s){switch(e.tag){case"assign":var[n,i,O]=$(e.value,s);return t[t.length-1].stmts.push(...i,{a:e.a,tag:"assign",name:e.name,value:O}),n;case"return":var[n,i,a]=l(e.value,s);return t[t.length-1].stmts.push(...i,{tag:"return",a:e.a,value:a}),n;case"expr":var[c,u,h]=$(e.expr,s);return t[t.length-1].stmts.push(...u,{tag:"expr",a:e.a,expr:h}),c;case"pass":return[];case"field-assign":{var[f,g,d]=l(e.obj,s),[m,P,x]=l(e.value,s);if("class"!==e.obj.a[0].tag)throw new Error("Compiler's cursed, go home.");const r={tag:"wasmint",value:s.classes.get(e.obj.a[0].name).get(e.field)[0]};return p(t,...g,...P,{tag:"store",a:e.a,start:d,offset:r,value:x}),[...f,...m]}case"if":var Q=r("$then"),w=r("$else"),S=r("$end"),b={tag:"jmp",lbl:S},[y,I,W]=l(e.cond,s),R={tag:"ifjmp",cond:W,thn:Q,els:w};p(t,...I,R),t.push({a:e.a,label:Q,stmts:[]});var v=o(e.thn,t,s);p(t,b),t.push({a:e.a,label:w,stmts:[]});var q=o(e.els,t,s);return p(t,b),t.push({a:e.a,label:S,stmts:[]}),[...y,...v,...q];case"while":var k=r("$whilestart"),_=r("$whilebody"),Z=r("$whileend");p(t,{tag:"jmp",lbl:k}),t.push({a:e.a,label:k,stmts:[]});var[y,I,W]=l(e.cond,s);p(t,...I,{tag:"ifjmp",cond:W,thn:_,els:Z}),t.push({a:e.a,label:_,stmts:[]});var T=o(e.body,t,s);return p(t,{tag:"jmp",lbl:k}),t.push({a:e.a,label:Z,stmts:[]}),[...y,...T]}}(e,t,s))})),n}function $(e,t){switch(e.tag){case"uniop":var[s,n,i]=l(e.expr,t);return[s,n,{...e,expr:i}];case"binop":var[O,o,$]=l(e.left,t),[p,c,u]=l(e.right,t);return[[...O,...p],[...o,...c],{...e,left:$,right:u}];case"builtin1":var[s,n,i]=l(e.arg,t);return[s,n,{tag:"builtin1",a:e.a,name:e.name,arg:i}];case"builtin2":var[O,o,$]=l(e.left,t),[p,c,u]=l(e.right,t);return[[...O,...p],[...o,...c],{...e,left:$,right:u}];case"call":const f=e.arguments.map((e=>l(e,t))),g=f.map((e=>e[0])).flat(),d=f.map((e=>e[1])).flat(),m=f.map((e=>e[2])).flat();return[g,d,{...e,arguments:m}];case"method-call":{const[s,r,n]=l(e.obj,t),i=e.arguments.map((e=>l(e,t))),O=i.map((e=>e[0])).flat(),a=i.map((e=>e[1])).flat(),o=i.map((e=>e[2])).flat();var h=e.obj.a[0];if("class"!==h.tag)throw new Error("Report this as a bug to the compiler developer, this shouldn't happen "+h.tag);return[[...s,...O],[...r,{tag:"expr",expr:{tag:"call",name:"assert_not_none",arguments:[n]}},...a],{tag:"call",name:`${h.name}$${e.method}`,arguments:[n,...o]}]}case"lookup":{const[s,r,n]=l(e.obj,t);if("class"!==e.obj.a[0].tag)throw new Error("Compiler's cursed, go home");const i=t.classes.get(e.obj.a[0].name),[O,a]=i.get(e.field);return[s,r,{tag:"load",start:n,offset:{tag:"wasmint",value:O}}]}case"construct":const P=[...t.classes.get(e.name).entries()],x=r("newObj"),Q={tag:"alloc",amount:{tag:"wasmint",value:P.length}},w=P.map((e=>{const[t,[s,r]]=e;return{tag:"store",start:{tag:"id",name:x},offset:{tag:"wasmint",value:s},value:r}}));return[[{name:x,type:e.a[0],value:{tag:"none"}}],[{tag:"assign",name:x,value:Q},...w,{tag:"expr",expr:{tag:"call",name:`${e.name}$__init__`,arguments:[{a:e.a,tag:"id",name:x}]}}],{a:e.a,tag:"value",value:{a:e.a,tag:"id",name:x}}];case"id":return[[],[],{tag:"value",value:{...e}}];case"literal":return[[],[],{tag:"value",value:a(e.value)}]}}function l(e,t){var[s,n,i]=$(e,t);if("value"===i.tag)return[s,n,i.value];var O=r("valname"),a={tag:"assign",a:e.a,name:O,value:i};return[[...s,{a:e.a,name:O,type:e.a[0],value:{tag:"none"}}],[...n,a],{tag:"id",name:O,a:e.a}]}function p(e,...t){e[e.length-1].stmts.push(...t)}t.lowerProgram=function(e,t){var s=[],a={a:e.a,label:r("$startProg"),stmts:[]};s.push(a);var $=o(e.stmts,s,t);return{a:e.a,funs:n(e.funs,t),inits:[...$,...i(e.inits)],classes:O(e.classes,t),body:s}}},660:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.parse=t.traverse=t.isClassDef=t.isFunDef=t.isVarInit=t.traverseDefs=t.traverseClass=t.traverseFunDef=t.traverseVarInit=t.traverseParameters=t.traverseType=t.traverseStmt=t.traverseArguments=t.traverseExpr=t.traverseLiteral=void 0;const r=s(178),n=s(142),i=s(591),O=s(665),a=s(440);function o(e,t){return{line:t.substring(0,e.from).split("\n").length}}function $(e,t){var s=o(e,t);switch(e.type.name){case"Number":return{tag:"num",value:Number(t.substring(e.from,e.to))};case"Boolean":return{tag:"bool",value:"True"===t.substring(e.from,e.to)};case"None":return{tag:"none"};case"CallExpression":if("TypeVar"==t.substring(e.from,e.to).split("(")[0])return{tag:"TypeVar"};default:throw new a.ParseError("Not literal",s.line)}}function l(e,t){var s=o(e,t);switch(e.type.name){case"Number":case"Boolean":case"None":return{a:s,tag:"literal",value:$(e,t)};case"VariableName":return{a:s,tag:"id",name:t.substring(e.from,e.to)};case"CallExpression":const o=t.substring(e.from,e.to),h=/\[[A-Za-z]*\]/g,f=o.match(h);e.firstChild();let g=l(e,t);e.nextSibling();const d=p(e,t);if(e.parent(),f){const e=f.toString(),t=e.substring(1,e.length-1).split(",").map((e=>u(e)));return{tag:"call",name:o.split("[")[0],arguments:d,genericArgs:t}}if("lookup"===g.tag)return{a:s,tag:"method-call",obj:g.obj,method:g.field,arguments:d};if("id"===g.tag){const e=g.name;return"print"===e||"abs"===e?{a:s,tag:"builtin1",name:e,arg:d[0]}:"max"===e||"min"===e||"pow"===e?{a:s,tag:"builtin2",name:e,left:d[0],right:d[1]}:{a:s,tag:"call",name:e,arguments:d}}throw new a.ParseError("Unknown target while parsing assignment",s.line);case"BinaryExpression":e.firstChild();const m=l(e,t);switch(e.nextSibling(),t.substring(e.from,e.to)){case"+":i=n.BinOp.Plus;break;case"-":i=n.BinOp.Minus;break;case"*":i=n.BinOp.Mul;break;case"//":i=n.BinOp.IDiv;break;case"%":i=n.BinOp.Mod;break;case"==":i=n.BinOp.Eq;break;case"!=":i=n.BinOp.Neq;break;case"<=":i=n.BinOp.Lte;break;case">=":i=n.BinOp.Gte;break;case"<":i=n.BinOp.Lt;break;case">":i=n.BinOp.Gt;break;case"is":i=n.BinOp.Is;break;case"and":i=n.BinOp.And;break;case"or":i=n.BinOp.Or;break;default:throw new a.ParseError("Could not parse op at "+e.from+" "+e.to+": "+t.substring(e.from,e.to),s.line)}e.nextSibling();const P=l(e,t);return e.parent(),{a:s,tag:"binop",op:i,left:m,right:P};case"ParenthesizedExpression":e.firstChild(),e.nextSibling();var r=l(e,t);return e.parent(),r;case"UnaryExpression":var i;switch(e.firstChild(),t.substring(e.from,e.to)){case"-":i=n.UniOp.Neg;break;case"not":i=n.UniOp.Not;break;default:throw new a.ParseError("Could not parse op at "+e.from+" "+e.to+": "+t.substring(e.from,e.to),s.line)}return e.nextSibling(),r=l(e,t),e.parent(),{a:s,tag:"uniop",op:i,expr:r};case"MemberExpression":e.firstChild();var O=l(e,t);e.nextSibling(),e.nextSibling();var c=t.substring(e.from,e.to);return e.parent(),{a:s,tag:"lookup",obj:O,field:c};case"self":return{a:s,tag:"id",name:"self"};default:throw new a.ParseError("Could not parse expr at "+e.from+" "+e.to+": "+t.substring(e.from,e.to),s.line)}}function p(e,t){e.firstChild();const s=[];for(e.nextSibling();")"!==e.type.name;){let r=l(e,t);s.push(r),e.nextSibling(),e.nextSibling()}return e.parent(),s}function c(e,t){var s=o(e,t);switch(e.node.type.name){case"ReturnStatement":return e.firstChild(),r=e.nextSibling()?l(e,t):{a:s,tag:"literal",value:{tag:"none"}},e.parent(),{a:s,tag:"return",value:r};case"AssignStatement":e.firstChild();const o=l(e,t);e.nextSibling(),e.nextSibling();var r=l(e,t);if(e.parent(),"lookup"===o.tag)return{a:s,tag:"field-assign",obj:o.obj,field:o.field,value:r};if("id"===o.tag)return{a:s,tag:"assign",name:o.name,value:r};throw new a.ParseError("Unknown target while parsing assignment",s.line);case"ExpressionStatement":e.firstChild();const p=l(e,t);return e.parent(),{a:s,tag:"expr",expr:p};case"IfStatement":e.firstChild(),e.nextSibling();var n=l(e,t);e.nextSibling(),e.firstChild();for(var i=[],O=[];e.nextSibling();)i.push(c(e,t));if(e.parent(),e.nextSibling()){for(e.nextSibling(),e.firstChild();e.nextSibling();)O.push(c(e,t));e.parent()}return e.parent(),{a:s,tag:"if",cond:n,thn:i,els:O};case"WhileStatement":e.firstChild(),e.nextSibling(),n=l(e,t),e.nextSibling();var $=[];for(e.firstChild();e.nextSibling();)$.push(c(e,t));return e.parent(),e.parent(),{a:s,tag:"while",cond:n,body:$};case"PassStatement":return{a:s,tag:"pass"};default:throw new a.ParseError("Could not parse stmt at "+e.node.from+" "+e.node.to+": "+t.substring(e.from,e.to),s.line)}}function u(e){switch(e){case"int":return i.NUM;case"bool":return i.BOOL;case"TypeVar":return i.TYPE_VAR;default:return i.CLASS(e)}}function h(e,t){let s=t.substring(e.from,e.to);switch(s){case"int":return i.NUM;case"bool":return i.BOOL;case"TypeVar":return i.TYPE_VAR;default:{const e=/\[[A-Za-z]*\]/g,t=s.match(e);if(t){const e=s.split("[")[0],r=t.toString(),n=r.substring(1,r.length-1).split(",").map((e=>u(e)));return i.CLASS(e,n)}return i.CLASS(s)}}}function f(e,t){var s=o(e,t);e.firstChild();const r=[];for(e.nextSibling();")"!==e.type.name;){let n=t.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw new a.ParseError("Missed type annotation for parameter "+n,s.line);e.firstChild(),e.nextSibling();let i=h(e,t);e.parent(),e.nextSibling(),r.push({name:n,type:i}),e.nextSibling()}return e.parent(),r}function g(e,t){var s=o(e,t);e.firstChild();var r=t.substring(e.from,e.to);if(e.nextSibling(),"TypeDef"!==e.type.name)throw e.parent(),new a.ParseError("invalid variable init",s.line);e.firstChild(),e.nextSibling();const n=h(e,t);e.parent(),e.nextSibling(),e.nextSibling();var i=$(e,t);return e.parent(),{a:s,name:r,type:n,value:i}}function d(e,t){var s=o(e,t);e.firstChild(),e.nextSibling();var r=t.substring(e.from,e.to);e.nextSibling();var n=f(e,t);e.nextSibling();let O=i.NONE;"TypeDef"===e.type.name&&(e.firstChild(),O=h(e,t),e.parent(),e.nextSibling()),e.firstChild();for(var a=[],$=[],l=e.nextSibling();l&&P(e);)a.push(g(e,t)),l=e.nextSibling();for(;l;)$.push(c(e,t)),l=e.nextSibling();return e.parent(),e.parent(),{a:s,name:r,parameters:n,ret:O,inits:a,body:$}}function m(e,t){var s=o(e,t);const r=[],n=[];e.firstChild(),e.nextSibling();const O=t.substring(e.from,e.to);e.nextSibling();const $=function(e,t){let s=[];for(e.firstChild(),e.nextSibling();")"!==e.type.name;){const r=h(e,t);"class"==r.tag&&"Generic"==r.name&&null!=r.genericArgs&&r.genericArgs.length>0&&r.genericArgs.forEach((e=>{if("class"!=e.tag)throw new Error("Expected TypeVar in Generic[] args");s.push(e.name)})),e.nextSibling(),e.nextSibling()}return e.parent(),s}(e,t);for(e.nextSibling(),e.firstChild();e.nextSibling();)if(P(e))r.push(g(e,t));else{if(!x(e))throw new a.ParseError(`Could not parse the body of class: ${O}`,s.line);n.push(d(e,t))}if(e.parent(),e.parent(),!n.find((e=>"__init__"===e.name)))if($.length>0){const e=$.map((e=>i.CLASS(e)));n.push({a:s,name:"__init__",parameters:[{name:"self",type:i.CLASS(O,e)}],ret:i.NONE,inits:[],body:[]})}else n.push({a:s,name:"__init__",parameters:[{name:"self",type:i.CLASS(O)}],ret:i.NONE,inits:[],body:[]});return{a:s,name:O,generics:$,fields:r,methods:n}}function P(e,t){if("AssignStatement"===e.type.name){e.firstChild(),e.nextSibling();const t="TypeDef"===e.type.name;return e.parent(),t}return!1}function x(e,t){return"FunctionDefinition"===e.type.name}function Q(e,t){return"ClassDefinition"===e.type.name}function w(e,t){var s=o(e,t);switch(e.node.type.name){case"Script":const n=[],i=[],O=[],o=[];for(var r=e.firstChild();r;){if(P(e))n.push(g(e,t));else if(x(e))i.push(d(e,t));else{if(!Q(e))break;O.push(m(e,t))}r=e.nextSibling()}for(;r;)o.push(c(e,t)),r=e.nextSibling();return e.parent(),{a:s,funs:i,inits:n,classes:O,stmts:o};default:throw new a.ParseError("Could not parse program at "+e.node.from+" "+e.node.to,s.line)}}t.traverseLiteral=$,t.traverseExpr=l,t.traverseArguments=p,t.traverseStmt=c,t.traverseType=h,t.traverseParameters=f,t.traverseVarInit=g,t.traverseFunDef=d,t.traverseClass=m,t.traverseDefs=function(e,t){const s=[],r=[],n=[];for(;;){if(P(e))s.push(g(e,t));else if(x(e))r.push(d(e,t));else{if(!Q(e))return[s,r,n];n.push(m(e,t))}e.nextSibling()}},t.isVarInit=P,t.isFunDef=x,t.isClassDef=Q,t.traverse=w,t.parse=function(e){const t=r.parser.parse(e);return O.stringifyTree(t.cursor(),e,0),w(t.cursor(),e)}},106:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.removeGenerics=void 0;const r=s(591);function n(e){let t="";return"class"==e.tag?(t=e.name,e.genericArgs&&e.genericArgs.forEach((e=>{t+="_"+n(e)})),t):"either"==e.tag?n(e.left)+"#"+n(e.right):e.tag}function i(e,t,s){if("class"!=e.tag||!e.genericArgs)return;const r=s.genericArgs.get(e.name);e.genericArgs.forEach(((e,s)=>{if("class"!=e.tag||!t.typeVars.has(e.name)){const O=r[s];(n=t.typeVarSpecializations,i=O,n.has(i)||n.set(i,new Set),n.get(i)).add(e)}var n,i}))}function O(e,t,s){const O=e.inits.map((e=>{if("class"==e.type.tag&&e.type.genericArgs){i(e.type,t,s);const O=n(e.type),a=r.CLASS(O);return{...e,type:a}}return e})),a=e.parameters.map((e=>{if("class"==e.type.tag&&e.type.genericArgs){i(e.type,t,s);const O=n(e.type),a=r.CLASS(O);return{...e,type:a}}return e}));let o=e.ret;if("class"==e.ret.tag&&e.ret.genericArgs){i(e.ret,t,s);const O=n(e.ret);o=r.CLASS(O)}return{...e,parameters:a,ret:o,inits:O}}function a(e,t){if("class"==e.tag&&e.genericArgs){const s=e.genericArgs.map((e=>a(e,t)));return{...e,genericArgs:s}}return"class"==e.tag&&t.has(e.name)?t.get(e.name):e}t.removeGenerics=function(e){let t=function(e){let t=new Map;return e.forEach((e=>{e.type==r.TYPE_VAR&&t.set(e.name,e.value)})),t}(e.inits),s={typeVars:t,typeVarSpecializations:new Map};const o=e.inits.filter((e=>"type-var"!=e.type.tag&&t.has(e.name))),$=e.classes.filter((e=>t.has(e.name)));if(o.length>0||$.length>0)throw new Error("TYPE ERROR: Class name(s) or local variable name(s) in conflict with type var name");const l=function(e){let t={genericArgs:new Map};return e.classes.forEach((e=>{null!=e.generics&&e.generics.length>0&&t.genericArgs.set(e.name,e.generics)})),t}(e),p=e.inits.map((e=>{if("class"==e.type.tag&&e.type.genericArgs){i(e.type,s,l);const t=n(e.type),O=r.CLASS(t);return{...e,type:O}}return e})).filter((e=>"type-var"!=e.type.tag)),c=e.stmts.map((e=>{if(("assign"==e.tag||"field-assign"==e.tag)&&"call"==e.value.tag&&l.genericArgs.has(e.value.name)){let t=e.value.name;e.value.genericArgs.forEach((e=>{t+="_"+n(e)}));const s={...e.value,name:t};return{...e,value:s}}return e})),u=e.funs.map((e=>O(e,s,l)));var h;e.classes.forEach((e=>function(e,t,s){e.fields.forEach((e=>i(e.type,t,s))),e.methods.forEach((e=>{e.inits.forEach((e=>i(e.type,t,s))),e.parameters.forEach((e=>i(e.type,t,s))),i(e.ret,t,s)}))}(e,s,l)));const f=(h=e.classes.map((e=>function(e,t,s){if(null==e.generics||0==e.generics.length)return[e];const r=e.generics;let i=[new Map];return r.forEach((e=>{let s=[],r=t.typeVarSpecializations.get(e);r&&(r.forEach((t=>{s=s.concat(i.map((s=>{let r=new Map(s);return r.set(e,t),r})))})),i=s)})),i.map((t=>{let s=e.name;t.forEach((e=>{s+="_"+n(e)}));const r=e.methods.map((e=>{const s=e.inits.map((e=>{const s=a(e.type,t);return{...e,type:s}})),r=e.parameters.map((e=>{const s=a(e.type,t);return{...e,type:s}})),n=a(e.ret,t);return{...e,inits:s,parameters:r,ret:n}}));return{...e,name:s,methods:r}}))}(e,s))),[].concat(...h)).map((e=>function(e,t,s){const i=e.fields.map((e=>{if("class"!=e.type.tag)return e;const t=n(e.type),s=r.CLASS(t);return{...e,type:s}})),a=e.methods.map((e=>O(e,t,s)));return{...e,fields:i,methods:a}}(e,s,l)));return{...e,inits:p,funs:u,classes:f,stmts:c}}},99:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BasicREPL=void 0;const r=s(277),n=s(740),i=s(660),O=s(106);t.BasicREPL=class{constructor(e){if(this.importObject=e,!e.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});new Int32Array(e.buffer)[0]=4,this.importObject.js={memory:e}}this.currentEnv={globals:new Map,classes:new Map,locals:new Set,labels:[],offset:1},this.currentTypeEnv=n.defaultTypeEnv,this.functions=""}async run(e){const t={importObject:this.importObject,env:this.currentEnv,typeEnv:this.currentTypeEnv,functions:this.functions},[s,n,i,O,a]=await r.run(e,t);this.currentEnv=n,this.currentTypeEnv=i,this.functions+=O;const o=this.importObject.env||{};return console.log(a),Object.keys(a.instance.exports).forEach((e=>{console.log("Consider key ",e);const t=a.instance.exports[e];t instanceof WebAssembly.Global&&(o[e]=t)})),this.importObject.env=o,s}tc(e){this.importObject,this.currentEnv,this.currentTypeEnv,this.functions;const t=i.parse(e),s=O.removeGenerics(t),[r,a]=n.tc(this.currentTypeEnv,s);return r.a[0]}}},277:function(e,t,s){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.run=t.augmentEnv=t.runWat=void 0;const n=r(s(113)),i=s(244),O=s(660),a=s(740),o=s(591),$=s(850),l=s(106);if("undefined"!=typeof process){const e=process.on;process.on=(...t)=>"uncaughtException"===t[0]?void 0:e.apply(process,t)}async function p(e,t){var s=(await n.default()).parseWat("test.wat",e).toBinary({}),r=await WebAssembly.instantiate(s.buffer,t);return[r.instance.exports.exported_func(),r]}function c(e,t){const s=new Map(e.globals),r=new Map(e.classes);var n=e.offset;return t.inits.forEach((e=>{s.set(e.name,!0)})),t.classes.forEach((e=>{const t=new Map;e.fields.forEach(((e,s)=>t.set(e.name,[s,e.value]))),r.set(e.name,t)})),{globals:s,classes:r,locals:e.locals,labels:e.labels,offset:n}}t.runWat=p,t.augmentEnv=c,t.run=async function(e,t){const s=O.parse(e);console.log(s);const r=l.removeGenerics(s);console.log(r);const[n,u]=a.tc(t.typeEnv,r),h=c(t.env,n),f=$.lowerProgram(n,h),g=n.a[0];var d="",m="";g!==o.NONE&&(d="(result i32)",m="(local.get $$last)");let P=t.env.globals;const x=i.compile(f,h),Q=[...P.keys()].map((e=>`(import "env" "${e}" (global $${e} (mut i32)))`)).join("\n"),w=x.globals.map((e=>`(global $${e} (export "${e}") (mut i32) (i32.const 0))`)).join("\n"),S=t.importObject;if(!S.js){const e=new WebAssembly.Memory({initial:2e3,maximum:2e3});S.js={memory:e}}const b=`(module\n    (import "js" "memory" (memory 1))\n    (func $assert_not_none (import "imports" "assert_not_none") (param i32) (result i32))\n    (func $print_num (import "imports" "print_num") (param i32) (result i32))\n    (func $print_bool (import "imports" "print_bool") (param i32) (result i32))\n    (func $print_none (import "imports" "print_none") (param i32) (result i32))\n    (func $abs (import "imports" "abs") (param i32) (result i32))\n    (func $min (import "imports" "min") (param i32) (param i32) (result i32))\n    (func $max (import "imports" "max") (param i32) (param i32) (result i32))\n    (func $pow (import "imports" "pow") (param i32) (param i32) (result i32))\n    (func $alloc (import "libmemory" "alloc") (param i32) (result i32))\n    (func $load (import "libmemory" "load") (param i32) (param i32) (result i32))\n    (func $store (import "libmemory" "store") (param i32) (param i32) (param i32))\n    ${Q}\n    ${w}\n    ${t.functions}\n    ${x.functions}\n    (func (export "exported_func") ${d}\n      ${x.mainSource}\n      ${m}\n    )\n  )`;console.log(b);const[y,I]=await p(b,S);return[o.PyValue(g,y),x.newEnv,u,x.functions,I]}},665:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyTree=void 0,t.stringifyTree=function e(t,s,r){var n="";if(n+=" ".repeat(2*r)+t.type.name,["Number","CallExpression","BinaryExpression","UnaryExpression","ArithOp","VariableName"].includes(t.type.name)&&(n+=" --\x3e "+s.substring(t.from,t.to)),n+="\n",t.firstChild()){do{n+=e(t,s,r+1)}while(t.nextSibling());t.parent()}return n}},740:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tcLiteral=t.tcExpr=t.tcStmt=t.tcBlock=t.tcClass=t.tcDef=t.tcInit=t.tc=t.augmentTEnv=t.join=t.isAssignable=t.isSubtype=t.isNoneOrClass=t.equalType=t.emptyLocalTypeEnv=t.emptyGlobalTypeEnv=t.defaultTypeEnv=void 0;const r=s(142),n=s(591),i=s(440),O=new Map;function a(){return{vars:new Map,expectedRet:n.NONE,actualRet:n.NONE,topLevel:!0}}function o(e,t){return e===t||"class"===e.tag&&"class"===t.tag&&e.name===t.name}function $(e){return"none"===e.tag||"class"===e.tag}function l(e,t,s){return o(t,s)||"none"===t.tag&&"class"===s.tag}function p(e,t,s){return l(0,t,s)}function c(e,t){const s=new Map(e.globals),r=new Map(e.functions),n=new Map(e.classes);return t.inits.forEach((e=>s.set(e.name,e.type))),t.funs.forEach((e=>r.set(e.name,[e.parameters.map((e=>e.type)),e.ret]))),t.classes.forEach((e=>{const t=new Map,s=new Map;e.fields.forEach((e=>t.set(e.name,e.type))),e.methods.forEach((e=>s.set(e.name,[e.parameters.map((e=>e.type)),e.ret]))),n.set(e.name,[t,s])})),{globals:s,functions:r,classes:n}}function u(e,t){const s=P(t.value);if(p(0,s,t.type))return{...t,a:[n.NONE,t.a]};throw new i.TypeCheckError("Expected type `"+t.type+"`; got type `"+s+"`")}function h(e,t){var s=a();s.expectedRet=t.ret,s.topLevel=!1,t.parameters.forEach((e=>s.vars.set(e.name,e.type)));var r=[];t.inits.forEach((e=>{const t=u(0,e);r.push(t),s.vars.set(e.name,t.type)}));const O=g(e,s,t.body);if(!p(0,s.actualRet,s.expectedRet))throw new i.TypeCheckError(`expected return type of block: ${JSON.stringify(s.expectedRet)} does not match actual return type: ${JSON.stringify(s.actualRet)}`);return{...t,a:[n.NONE,t.a],body:O,inits:r}}function f(e,t){const s=t.fields.map((e=>u(0,e))),r=t.methods.map((t=>h(e,t))),O=t.methods.find((e=>"__init__"===e.name));if(1!==O.parameters.length||"self"!==O.parameters[0].name||!o(O.parameters[0].type,n.CLASS(t.name))||O.ret!==n.NONE)throw new i.TypeCheckError("Cannot override __init__ type signature");return{a:[n.NONE,t.a],name:t.name,generics:t.generics,fields:s,methods:r}}function g(e,t,s){return s.map((s=>d(e,t,s)))}function d(e,t,s){switch(s.tag){case"assign":const $=m(e,t,s.value);var r;if(t.vars.has(s.name))r=t.vars.get(s.name);else{if(!e.globals.has(s.name))throw new i.TypeCheckError("Unbound id: "+s.name);r=e.globals.get(s.name)}if(!p(0,$.a[0],r))throw new i.TypeCheckError("Non-assignable types");return{a:[n.NONE,s.a],tag:s.tag,name:s.name,value:$};case"expr":const l=m(e,t,s.expr);return{a:l.a,tag:s.tag,expr:l};case"if":var O=m(e,t,s.cond);const c=g(e,t,s.thn),u=t.actualRet;t.actualRet=n.NONE;const h=g(e,t,s.els),f=t.actualRet;if(O.a[0]!==n.BOOL)throw new i.TypeCheckError("Condition Expression Must be a bool");return u!==f&&(t.actualRet={tag:"either",left:u,right:f}),{a:[u,s.a],tag:s.tag,cond:O,thn:c,els:h};case"return":if(t.topLevel)throw new i.TypeCheckError("cannot return outside of functions");const d=m(e,t,s.value);if(!p(0,d.a[0],t.expectedRet))throw new i.TypeCheckError("expected return type `"+t.expectedRet.tag+"`; got type `"+d.a.tag+"`");return t.actualRet=d.a[0],{a:d.a,tag:s.tag,value:d};case"while":O=m(e,t,s.cond);const P=g(e,t,s.body);if(!o(O.a[0],n.BOOL))throw new i.TypeCheckError("Condition Expression Must be a bool");return{a:[n.NONE,s.a],tag:s.tag,cond:O,body:P};case"pass":return{a:[n.NONE,s.a],tag:s.tag};case"field-assign":var a=m(e,t,s.obj);const x=m(e,t,s.value);if("class"!==a.a[0].tag)throw new i.TypeCheckError("field assignments require an object");if(!e.classes.has(a.a[0].name))throw new i.TypeCheckError("field assignment on an unknown class");const[Q,w]=e.classes.get(a.a[0].name);if(!Q.has(s.field))throw new i.TypeCheckError(`could not find field ${s.field} in class ${a.a[0].name}`);if(!p(0,x.a[0],Q.get(s.field)))throw new i.TypeCheckError(`could not assign value of type: ${x.a}; field ${s.field} expected type: ${Q.get(s.field)}`);return{...s,a:[n.NONE,s.a],obj:a,value:x}}}function m(e,t,s){switch(s.tag){case"literal":return{...s,a:[P(s.value),s.a]};case"binop":const l=m(e,t,s.left),c=m(e,t,s.right),u={...s,left:l,right:c};switch(s.op){case r.BinOp.Plus:case r.BinOp.Minus:case r.BinOp.Mul:case r.BinOp.IDiv:case r.BinOp.Mod:if(o(l.a[0],n.NUM)&&o(c.a[0],n.NUM))return{...u,a:[n.NUM,s.a]};throw new i.TypeCheckError("Type mismatch for numeric op"+s.op);case r.BinOp.Eq:case r.BinOp.Neq:if("class"===l.a[0].tag||"class"===c.a[0].tag)throw new i.TypeCheckError("cannot apply operator '==' on class types");if(o(l.a[0],c.a[0]))return{...u,a:[n.BOOL,s.a]};throw new i.TypeCheckError("Type mismatch for op"+s.op);case r.BinOp.Lte:case r.BinOp.Gte:case r.BinOp.Lt:case r.BinOp.Gt:if(o(l.a[0],n.NUM)&&o(c.a[0],n.NUM))return{...u,a:[n.BOOL,s.a]};throw new i.TypeCheckError("Type mismatch for op"+s.op);case r.BinOp.And:case r.BinOp.Or:if(o(l.a[0],n.BOOL)&&o(c.a[0],n.BOOL))return{...u,a:[n.BOOL,s.a]};throw new i.TypeCheckError("Type mismatch for boolean op"+s.op);case r.BinOp.Is:if(!$(l.a[0])||!$(c.a[0]))throw new i.TypeCheckError("is operands must be objects");return{...u,a:[n.BOOL,s.a]}}case"uniop":const h=m(e,t,s.expr),f={...s,a:h.a,expr:h};switch(s.op){case r.UniOp.Neg:if(o(h.a[0],n.NUM))return f;throw new i.TypeCheckError("Type mismatch for op"+s.op);case r.UniOp.Not:if(o(h.a[0],n.BOOL))return f;throw new i.TypeCheckError("Type mismatch for op"+s.op)}case"id":if(t.vars.has(s.name))return{...s,a:[t.vars.get(s.name),s.a]};if(e.globals.has(s.name))return{...s,a:[e.globals.get(s.name),s.a]};throw new i.TypeCheckError("Unbound id: "+s.name);case"builtin1":if("print"===s.name){const r=m(e,t,s.arg);if(r.a&&"class"==r.a[0].tag)throw new Error("TYPE ERROR: print can't be called on objects");return{...s,a:r.a,arg:r}}if(e.functions.has(s.name)){const[[r],n]=e.functions.get(s.name),i=m(e,t,s.arg);if(p(0,i.a[0],r))return{...s,a:[n,s.a],arg:i};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"builtin2":if(e.functions.has(s.name)){const[[r,n],i]=e.functions.get(s.name),O=m(e,t,s.left),a=m(e,t,s.right);if(p(0,r,O.a[0])&&p(0,n,a.a[0]))return{...s,a:[i,s.a],left:O,right:a};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"call":if(e.classes.has(s.name)){const t={a:[n.CLASS(s.name),s.a],tag:"construct",name:s.name},[r,O]=e.classes.get(s.name);if(O.has("__init__")){const[e,r]=O.get("__init__");if(s.arguments.length!==e.length-1)throw new i.TypeCheckError("__init__ didn't receive the correct number of arguments from the constructor");if(r!==n.NONE)throw new i.TypeCheckError("__init__  must have a void return type");return t}return t}if(e.functions.has(s.name)){const[r,n]=e.functions.get(s.name),i=s.arguments.map((s=>m(e,t,s)));if(console.log(i),r.length===s.arguments.length&&i.every(((e,t)=>p(0,e.a[0],r[t]))))return{...s,a:[n,s.a],arguments:i};throw new TypeError("Function call type mismatch: "+s.name)}throw new TypeError("Undefined function: "+s.name);case"lookup":if("class"===(O=m(e,t,s.obj)).a[0].tag){if(e.classes.has(O.a[0].name)){const[t,r]=e.classes.get(O.a[0].name);if(t.has(s.field))return{...s,a:[t.get(s.field),s.a],obj:O};throw new i.TypeCheckError(`could not found field ${s.field} in class ${O.a[0].name}`)}throw new i.TypeCheckError("field lookup on an unknown class")}throw new i.TypeCheckError("field lookups require an object");case"method-call":var O=m(e,t,s.obj),a=s.arguments.map((s=>m(e,t,s)));if("class"===O.a[0].tag){if(e.classes.has(O.a[0].name)){const[t,r]=e.classes.get(O.a[0].name);if(r.has(s.method)){const[e,t]=r.get(s.method),n=[O].concat(a);if(e.length===n.length&&e.every(((e,t)=>p(0,n[t].a[0],e))))return{...s,a:[t,s.a],obj:O,arguments:a};throw new i.TypeCheckError(`Method call type mismatch: ${s.method} --- callArgs: ${JSON.stringify(n)}, methodArgs: ${JSON.stringify(e)}`)}throw new i.TypeCheckError(`could not found method ${s.method} in class ${O.a[0].name}`)}throw new i.TypeCheckError("method call on an unknown class")}throw new i.TypeCheckError("method calls require an object");default:throw new i.TypeCheckError(`unimplemented type checking for expr: ${s}`)}}function P(e){switch(e.tag){case"bool":return n.BOOL;case"num":return n.NUM;case"none":return n.NONE}}O.set("abs",[[n.NUM],n.NUM]),O.set("max",[[n.NUM,n.NUM],n.NUM]),O.set("min",[[n.NUM,n.NUM],n.NUM]),O.set("pow",[[n.NUM,n.NUM],n.NUM]),O.set("print",[[n.CLASS("object")],n.NUM]),t.defaultTypeEnv={globals:new Map,functions:O,classes:new Map},t.emptyGlobalTypeEnv=function(){return{globals:new Map,functions:new Map,classes:new Map}},t.emptyLocalTypeEnv=a,t.equalType=o,t.isNoneOrClass=$,t.isSubtype=l,t.isAssignable=p,t.join=function(e,t,s){return n.NONE},t.augmentTEnv=c,t.tc=function(e,t){const s=a(),r=c(e,t),i=t.inits.map((e=>u(0,e))),O=t.funs.map((e=>h(r,e))),o=t.classes.map((e=>f(r,e))),$=g(r,s,t.stmts);var l=n.NONE;$.length&&(l=$[$.length-1].a[0]);for(let e of s.vars.keys())r.globals.set(e,s.vars.get(e));return[{a:[l,t.a],inits:i,funs:O,classes:o,stmts:$},r]},t.tcInit=u,t.tcDef=h,t.tcClass=f,t.tcBlock=g,t.tcStmt=d,t.tcExpr=m,t.tcLiteral=P},591:(e,t)=>{function s(e){return{tag:"num",value:e}}function r(e){return{tag:"bool",value:e}}function n(e,t){return 0===t?{tag:"none"}:{tag:"object",name:e,address:t}}Object.defineProperty(t,"__esModule",{value:!0}),t.CLASS=t.TYPE_VAR=t.NONE=t.BOOL=t.NUM=t.PyNone=t.PyObj=t.PyBool=t.PyInt=t.PyValue=void 0,t.PyValue=function(e,t){switch(e.tag){case"number":return s(t);case"bool":return r(Boolean(t));case"class":return n(e.name,t);case"none":return{tag:"none"}}},t.PyInt=s,t.PyBool=r,t.PyObj=n,t.PyNone=function(){return{tag:"none"}},t.NUM={tag:"number"},t.BOOL={tag:"bool"},t.NONE={tag:"none"},t.TYPE_VAR={tag:"type-var"},t.CLASS=function(e,t=null){return{tag:"class",name:e,genericArgs:t}}},697:(e,t,s)=>{const r=s(99),n=s(591);function i(e,t){console.log("Logging from WASM: ",t);const s=document.createElement("pre");return document.getElementById("output").appendChild(s),s.innerText=function(e,t){switch(e.tag){case"number":return t.toString();case"bool":return t?"True":"False";case"none":return"None";case"class":return e.name}}(e,t),t}document.addEventListener("DOMContentLoaded",(async function(){const e=new WebAssembly.Memory({initial:10,maximum:100}),t=await fetch("memory.wasm").then((e=>e.arrayBuffer())).then((t=>WebAssembly.instantiate(t,{js:{mem:e}})));var s={imports:{assert_not_none:e=>function(e){if(0===e)throw new Error("RUNTIME ERROR: cannot perform operation on none");return e}(e),print_num:e=>i(n.NUM,e),print_bool:e=>i(n.BOOL,e),print_none:e=>i(n.NONE,e),abs:Math.abs,min:Math.min,max:Math.max,pow:Math.pow},libmemory:t.instance.exports,memory_values:e,js:{memory:e}},O=new r.BasicREPL(s);function a(e){if(void 0===e)return void console.log("skip");if("none"===e.tag)return;const t=document.createElement("pre");switch(document.getElementById("output").appendChild(t),e.tag){case"num":t.innerText=String(e.value);break;case"bool":t.innerHTML=e.value?"True":"False";break;case"object":t.innerHTML=`<${e.name} object at ${e.address}`;break;default:throw new Error(`Could not render value: ${e}`)}}function o(e){const t=document.createElement("pre");document.getElementById("output").appendChild(t),t.setAttribute("style","color: red"),t.innerText=String(e)}document.getElementById("run").addEventListener("click",(function(e){O=new r.BasicREPL(s);const t=document.getElementById("user-code");document.getElementById("output").innerHTML="",O.run(t.value).then((e=>{a(e),console.log("run finished")})).catch((e=>{o(e),console.log("run failed",e)}))})),function(){document.getElementById("output").innerHTML="";const e=document.getElementById("next-code");e.addEventListener("keypress",(t=>{if(t.shiftKey&&"Enter"===t.key);else if("Enter"===t.key){t.preventDefault();const s=document.createElement("div"),r=document.createElement("span");r.innerText="»",s.appendChild(r);const n=document.createElement("textarea");n.disabled=!0,n.className="repl-code",s.appendChild(n),document.getElementById("output").appendChild(s);const i=e.value;n.value=i,e.value="",O.run(i).then((e=>{a(e),console.log("run finished")})).catch((e=>{o(e),console.log("run failed",e)}))}}))}()}))},113:e=>{e.exports=wabt}},t={};!function s(r){if(t[r])return t[r].exports;var n=t[r]={exports:{}};return e[r].call(n.exports,n,n.exports,s),n.exports}(697)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,